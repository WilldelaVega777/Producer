<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mindscape.WpfPropertyGrid</name>
    </assembly>
    <members>
        <member name="T:Mindscape.WpfPropertyGrid.Calendar">
            <summary>
            A control for displaying a monthly calendar.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.DaysListPartName">
            <summary>
            Identifies the template part responsible for displaying the days of the month.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.DaysOfWeekListPartName">
            <summary>
            Identifies the template part responsible for displaying the days of the week.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.YearBackCommand">
            <summary>
            A command for moving the selection to one year earlier.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.YearForwardCommand">
            <summary>
            A command for moving the selection to one year later.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.MonthBackCommand">
            <summary>
            A command for moving the selection to one month earlier.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.MonthForwardCommand">
            <summary>
            A command for moving the selection to one month later.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.WeekBackCommand">
            <summary>
            A command for moving the selection to one week earlier.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.WeekForwardCommand">
            <summary>
            A command for moving the selection to one week later.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.DayBackCommand">
            <summary>
            A command for moving the selection to one day earlier.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.DayForwardCommand">
            <summary>
            A command for moving the selection to one day later.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.SelectTodayCommand">
            <summary>
            A command for selecting the current date.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Calendar.SelectedDate"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.VisibleMonthProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Calendar.VisibleMonth"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.WeeksToDisplayProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Calendar.WeeksToDisplay"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Calendar.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Calendar.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Calendar.Maximum"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Calendar.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Calendar"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Calendar.OnApplyTemplate">
            <summary>
            Called when a template is applied to the <see cref="T:Mindscape.WpfPropertyGrid.Calendar"/> control.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.SelectedDate">
            <summary>
            Gets or sets the selected date.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Calendar.SelectedDateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td><see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault"/></td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.VisibleMonth">
            <summary>
            Gets or sets the month which is currently shown on the control.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Calendar.VisibleMonthProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.WeeksToDisplay">
            <summary>
            Gets or sets the number of weeks to display.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Calendar.WeeksToDisplayProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.Minimum">
            <summary>
            Gets or sets the minimum date that can be selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Calendar.MinimumProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.Maximum">
            <summary>
            Gets or sets the maximum date that can be selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Calendar.MaximumProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Calendar.TodayButtonContentKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the content of the "Today" button.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PopupCalendar">
            <summary>
            A control for displaying a monthly calendar in a popup style.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PopupCalendar.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PopupCalendar.SelectedDate"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PopupCalendar.MinimumProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PopupCalendar.Minimum"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PopupCalendar.MaximumProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PopupCalendar.Maximum"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PopupCalendar.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PopupCalendar.IsOpen"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PopupCalendar.SelectedDate">
            <summary>
            Gets or sets the selected date.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PopupCalendar.SelectedDateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td><see cref="P:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault"/></td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PopupCalendar.Minimum">
            <summary>
            Gets or sets the minimum date that can be selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PopupCalendar.MinimumProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PopupCalendar.Maximum">
            <summary>
            Gets or sets the maximum date that can be selected.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PopupCalendar.MaximumProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PopupCalendar.IsOpen">
            <summary>
            Gets or sets whether the popup part of the control is open.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PopupCalendar.IsOpenProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ColorPicker">
            <summary>
            A control for selecting a color.
            </summary>
            <remarks>The ColorPicker control supports only the WPF System.Windows.Media.Color type, 
            not the GDI+ System.Drawing.Color type, and at present supports only the RGB color model,
            not the ScRGB color model.  ScRGB color values can be set, but will be converted to the
            nearest RGB equivalents.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorPicker.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ColorPicker"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ColorPicker.SelectedColorProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.ColorPicker.SelectedColor"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the currently selected color.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.ColorPicker.SelectedColorProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DropDown">
            <summary>
            A control for displaying a summary and a drop-down detail pane, similar to a combo box.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DropDown.ContentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DropDown.Content"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DropDown.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DropDown.MaxDropDownHeight"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DropDown.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DropDown.IsDropDownOpen"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DropDown.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DropDown.HeaderTemplate"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DropDown.DropDownTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DropDown.DropDownTemplate"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DropDown.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Provides control-specific handling for the <see cref="E:System.Windows.UIElement.IsKeyboardFocusWithinChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DropDown.Content">
            <summary>
            Gets or sets the content to be presented in the summary and drop-down areas.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.DropDown.ContentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DropDown.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down pane.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.DropDown.MaxDropDownHeightProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DropDown.IsDropDownOpen">
            <summary>
            Gets or sets whether the drop-down is currently open.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.DropDown.IsDropDownOpenProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DropDown.HeaderTemplate">
            <summary>
            Gets or sets the template for the summary part of the control (the
            part which is visible when the control is not dropped down).
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.DropDown.HeaderTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DropDown.DropDownTemplate">
            <summary>
            Gets or sets the template for the content of drop-down part of the contro.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.DropDown.DropDownTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DropDownToggleButton">
            <summary>
            Distinguishes toggle buttons for dropping down popups.  This enables
            specific visual styling.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.EditorDecorator">
            <summary>
            A control which acts a placeholder for wrapping a decorating DataTemplate
            (represented by the ContentTemplate) around a "base" template known only at run time.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedTemplate"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedNodeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedNode"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedTemplate">
            <summary>
            Gets or sets the template around which the decoration will be placed.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedNode">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfPropertyGrid.Node"/> that represents the data item being edited.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.EditorDecorator.DecoratedNodeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ManyEditor">
            <summary>
            A control for editing multiple instances of a property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ManyEditor.ResetCommand">
            <summary>
            A command for initialising an inconsistent set of values.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ManyEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ManyEditor"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ManyEditor.ManyHolderProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.ManyEditor.ManyHolder"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ManyEditor.IsConsistentProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.ManyEditor.IsConsistent"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ManyEditor.ManyHolder">
            <summary>
            Gets or sets the value displayed in the editor.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.ManyEditor.ManyHolderProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ManyEditor.IsConsistent">
            <summary>
            Gets whether the held Many has a consistent value.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.ManyEditor.IsConsistentProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ManyEditor.ResetButtonContentKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the content of the "Reset" button.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ManyEditor.ResetToolTipContentKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the tooltip of the "Reset" button.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ManyEditor.InconsistentValuesTemplateKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the "multiple values" data template.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TextBox">
            <summary>
            Represents a text box which automatically selects its content when the user clicks
            into the text box.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TextBox.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Adds class handling for the <see cref="E:System.Windows.UIElement.GotKeyboardFocus"/> event.
            </summary>
            <param name="e">Provides data about the event.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TextBox.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Adds class handling for the <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown"/> event.
            </summary>
            <param name="e">Provides data about the event.</param>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ViewCommandsToolBar">
            <summary>
            A control which encapsulates common <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> view manipulation code.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.OnApplyTemplate">
            <summary>
            Called by the framework when a template is applied to the control.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.ShowUnsorted">
            <summary>
            A command for removing all sorting from a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.ShowAlphaSorted">
            <summary>
            A command for sorting a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> alphabetically by property name.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.ShowCategorized">
            <summary>
            A command for sorting a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> by category.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.TargetProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.Target"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ViewCommandsToolBar"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.Target">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> whose view is controlled by the toolbar.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.ViewCommandsToolBar.TargetProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.AreEqualConverter">
            <summary>
            Converts two objects to a boolean value indicating whether the two are reference-equal.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.AreEqualConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts two values to a boolean indicating whether they are reference-equal.
            </summary>
            <param name="values">The values produced by the binding sources.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>true if the two values are reference-equal; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.AreEqualConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ColorChannelConverter">
            <summary>
            Converts a color by changing the value of one of its channels.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorChannelConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the input <see cref="T:System.Windows.Media.Color"/> by modifying the channel specified by the <see cref="P:Mindscape.WpfPropertyGrid.ColorChannelConverter.Channel"/>
            property to the value specified in the parameter argument.
            </summary>
            <param name="value">The Color value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The value to which to set the specified <see cref="P:Mindscape.WpfPropertyGrid.ColorChannelConverter.Channel"/>.
            This value must be convertible to <see cref="T:System.Byte"/>.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The modified color.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorChannelConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ColorChannelConverter.Channel">
            <summary>
            Gets or sets the channel that is affected by this <see cref="T:Mindscape.WpfPropertyGrid.ColorChannelConverter"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ColorChannel">
            <summary>
            Represents one of the four channels of a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ColorChannel.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ColorChannel.Red">
            <summary>
            The red channel.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ColorChannel.Green">
            <summary>
            The green channel.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ColorChannel.Blue">
            <summary>
            The blue channel.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.GroupingViewConverter">
            <summary>
            Converts a PropertyGrid to a boolean value indicating if grouping is enabled or disabled
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.GroupingViewConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a ObservableCollection of generic type GroupDescription to a boolean value indicating if grouping is enabled or disabled
            </summary>
            <param name="value">The ObservableCollection of generic type GroupDescription value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A Boolean whose value is true if grouping is enabled, otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.GroupingViewConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ColorToBrushConverter">
            <summary>
            Converts a Color to an equivalent SolidColorBrush.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Color to an equivalent SolidColorBrush.
            </summary>
            <param name="value">The Color value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A SolidColorBrush whose color is that of the binding source.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ColorToNameConverter">
            <summary>
            Converts between Color values and names.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorToNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Color value to a name.
            </summary>
            <param name="value">The Color value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The name of the color, if it is a standard color (named in the
            Colors class); otherwise a string representation of the color.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ColorToNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DoubleToByteConverter">
            <summary>
            Converts between doubles and bytes.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DoubleToByteConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a double value to a byte.
            </summary>
            <param name="value">The double value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A byte of equal value to the double.  If the double is not convertible
            to a byte (according to the rules of System.Convert), an exception is thrown.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DoubleToByteConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a byte value to a double.
            </summary>
            <param name="value">The byte value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The equivalent double value.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.EnumValuesConverter">
            <summary>
            Converts a value from an enumerated type into a set of permitted values.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EnumValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The value for which a list of permitted values is required.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>An array of values compatible with the type of <paramref name="value"/>,
            suitable for use as the ItemsSource of a list or combo box.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EnumValuesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.GridSpacingCompensationConverter">
            <summary>
            Calculates margins and padding required by editors with non-default background
            colors implemented using Border elements.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.GridSpacingCompensationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculates the margin or padding that should be set on a Border element to
            align the border with the column separator and the border content with the
            value column.
            </summary>
            <param name="value">The editor margin imposed by the <see cref="T:Mindscape.WpfPropertyGrid.BuiltInEditor"/> class.
            This will be the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.DefaultMargin"/> of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> class.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The margin or padding to set on the Border element.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.GridSpacingCompensationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.GridSpacingCompensationConverter.Usage">
            <summary>
            Gets or sets whether the thickness is for use as a margin (expanding a
            Border over the space reserved by the grid) or as padding (realigning content
            to unbordered layouts).
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ThicknessUsage">
            <summary>
            Defines whether a <see cref="T:Mindscape.WpfPropertyGrid.GridSpacingCompensationConverter"/> should calculate
            margin or padding values.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ThicknessUsage.Margin">
            <summary>
            The converter should calculate margin values.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ThicknessUsage.Padding">
            <summary>
            The converter should calculate padding values.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ListSelectDisplayConverter">
            <summary>
            Derives display text for items in a list-select editor.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ListSelectDisplayConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a string, using any available property metadata.
            </summary>
            <param name="values">An array of two objects: the value to be converted, and
            the property metadata expressed as an <see cref="T:Mindscape.WpfPropertyGrid.IPropertyInfo"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ListSelectDisplayConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to multiple binding sources.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.LocalDateFormatConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> into a date representation suitable for the culture
            in use.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.LocalDateFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The date to represent.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A string representing the date in the specified culture.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.LocalDateFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The string date representation produced at the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A parsed <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.LocalDateFormatConverter.LongFormat">
            <summary>
            Gets or sets whether to use the culture's "long date" format.  If false, the "short date"
            is used.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ManyToNodeConverter">
            <summary>
            Converts an <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/> for a <see cref="T:Mindscape.WpfPropertyGrid.Many"/> to a 
            node of singular type suitable for editor selection.
            </summary>
            <remarks>This class supports the multiple selection infrastructure and is 
            intended for use only as part of a <see cref="T:Mindscape.WpfPropertyGrid.ManyEditor"/> control template.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ManyToNodeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/> containing a consistent <see cref="T:Mindscape.WpfPropertyGrid.Many"/>
            to a <see cref="T:Mindscape.WpfPropertyGrid.Node"/> carrying metadata for selecting an editor appropriate to the
            Many type.
            </summary>
            <param name="value">An ObjectWrapper containing a Many.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A value suitable for use by the binding target.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ManyToNodeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.MarginInversionConverter">
            <summary>
            Negates the Left and Right values of a Thickness.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MarginInversionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a Thickness to another Thickness which is equivalent except for negating
            the Left and Right properties.
            </summary>
            <param name="value">The value for which an inverted Thickness is required.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A Thickness with the same Top and Bottom values as the source,
            but whose Left and Right values have been negated (sign inverted).</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MarginInversionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.MaskPromptRemovalConverter">
            <summary>
            Converts a display string containing leading or trailing mask prompts into an underlying value.
            </summary>
            <remarks>This is primarily intended to support entering numeric values through the masked
            text editor.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MaskPromptRemovalConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The string.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The original string.  The converter performs no conversion in this direction.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MaskPromptRemovalConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The string with prompts inserted by the masked text provider.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The value of the string, ignoring any leading or trailing prompts and converted
            to the target type.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.MaskPromptRemovalConverter.PromptChar">
            <summary>
            Gets or sets the mask prompt character.  The default is a single underline.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.MonthDisplayNameConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> value into a textual representation of the month.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MonthDisplayNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The date whose month is to be displayed.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A string representing the month and year, as per the <see cref="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern"/>.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MonthDisplayNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NodeToCategoryConverter">
            <summary>
            Converts a <see cref="T:Mindscape.WpfPropertyGrid.Node"/> to its category.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NodeToCategoryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:Mindscape.WpfPropertyGrid.Node"/> representing a property to the category of that
            property, as specified using the <see cref="T:System.ComponentModel.CategoryAttribute"/>.
            </summary>
            <param name="value">The node whose category is required.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The category of the node property, or the default category if none is specified.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NodeToCategoryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NodeToCategoryConverter.DefaultCategory">
            <summary>
            Gets or sets the category name for properties with no <see cref="T:System.ComponentModel.CategoryAttribute"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.RowToDescriptionConverter">
            <summary>
            Obtains the description of a property from a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.RowToDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/> to the description of the contained property.
            </summary>
            <param name="value">The PropertyGridRow.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The description string of the property contained in the row.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.RowToDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.SameMonthConverter">
            <summary>
            Converts a pair of dates to a boolean value indicating whether they are in the same month.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.SameMonthConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="values">The dates to check.  This array must contain exactly two dates.  If
            the array contains fewer than two dates, an <see cref="T:System.IndexOutOfRangeException"/> occurs.
            If the array contains more than two dates, the extra dates are ignored.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>true if the dates are in the same month; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.SameMonthConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetTypes">The types to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ScalingConverter">
            <summary>
            Scales a value.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ScalingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Scales the specified value, optionally rounding up to the nearest integer.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>The scaled and optionally rounded value.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ScalingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ScalingConverter.ScaleFactor">
            <summary>
            Gets or sets the scale factor.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ScalingConverter.ForceToInteger">
            <summary>
            Gets or sets whether the resulting scaled value is rounded up
            to the nearest integer.
            </summary>
        </member>
        <member name="T:Infralution.Licensing.EncryptedLicense">
            <summary>
            Defines an encrypted license for a component or control generated using the Infralution
            Licensing System.
            </summary>
            <remarks>
            The Infralution Licensing System provides a secure way of licensing .NET controls,
            components and applications.   Licenses are protected using public key encryption to
            minimize possibility of cracking.
            </remarks>
            <seealso cref="T:Infralution.Licensing.EncryptedLicenseProvider"/>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new Infralution Encrypted License
            </summary>
            <param name="key">The key for the license</param>
            <param name="serialNo">The serial number of the license</param>
            <param name="productInfo">The product data associated with the license</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.Dispose">
            <summary>
            Cleans up any resources held by the license
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.Checksum(System.String)">
            <summary>
            Returns a three character checksum based on the given input string
            </summary>
            <param name="input">The input string to return a checksum for</param>
            <returns>An checksum that can be used to validate the given input string</returns>
            <remarks>
            <para>
            This function can be used to generate a short checksum that can be embedded in a
            license key as <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/>.  This allows you to tie the license key to 
            information supplied by the user (for instance the name of the purchaser) without
            having to include the full information in the license key.  This enables license keys
            to be kept reasonably short.
            </para>
            <para>
            When the license is checked by the application it performs a checksum on the information
            supplied by the user and checks that it matches the information in the ProductInfo that
            was generated when the license was issued.   The License Tracker application provides
            support for "CustomGenerators" which allow you provide the code to generate the ProductInfo
            from customer and other information.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicense.HashString(System.String)">
            <summary>
            Implements a string hashing code algorithm equivalent to the .NET 2003 String.GetHashCode()
            </summary>
            <remarks>
            Microsoft have changed the underlying String.GetHashCode algorithm.  This method provides an
            equivalent compatible method that can be used on all platforms returning the same result.
            </remarks>
            <param name="szStr">The string to get the hash code for</param>
            <returns>The hash code</returns>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.LicenseKey">
            <summary>
            The license key for the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.ProductInfo">
            <summary>
            The product data associated with the license
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicense.SerialNo">
            <summary>
            The unique serial no for the license
            </summary>
        </member>
        <member name="T:Infralution.Licensing.TextEncoding">
            <summary>
            Defines the types of encoding possible for license keys
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Hex">
            <summary>
            Keys are encoded using hexadecimal notation (characters 0-9 and A-F)
            </summary>
        </member>
        <member name="F:Infralution.Licensing.TextEncoding.Base32">
            <summary>
            Keys are encoding using base 32 with the following character set (23456789ABCDEFGHJKLMNPQRSTUVWXYZ)
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)">
            <summary>
            Set the parameters used to validate licenses created by this provider.
            </summary>
            <remarks>
            This must be called by the client software prior to obtaining licenses using the EncryptedLicenseProvider.
            The parameters are generated using the Infralution License Key Generator and pasted into the calling client code.
            </remarks>
            <param name="licenseParameters">An XML string containing parameters used to validate licenses</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateLicenseParameters(System.String,System.Int32,System.Boolean,Infralution.Licensing.TextEncoding)">
            <summary>
            Generate the XML license parameter string that is used to validate licenses generated using the 
            given password
            </summary>
            <param name="password">The password used to encrypted the license data</param>
            <param name="keyStrength">
            The keyStrength defines the size (in bytes) of the key verified by public key encryption.  The longer the key
            the harder it is to break the licensing scheme by brute force.   Note that increasing the key strength
            increases the length of the generated keys.  A KeyStrength of 7 will generate keys that are 32 characters
            long.  A KeyStrength of 8 to 15 will generate keys that are 48 characters long
            </param>
            <param name="checksumProductInfo">
            Is a checksum of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> included in the key.  The checksum is used to validate
            that the contents of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> are valid.  This is really only required if the length of
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> is 7 or more characters long.  For <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> of less 
            than 7 characters the ProductInfo is validated by the encryption algorithm. 
            </param>
            <param name="textEncoding">
            The encoding used to convert the key data to and from text
            </param>
            <returns>An XML string which is used to initialise the EncryptedLicenseProvider</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(System.Int32,System.String,System.String,System.Boolean,Infralution.Licensing.TextEncoding,System.Int32)">
            <summary>
            Generate a new encrypted license using the given password
            </summary>
            <param name="keyStrength">The strength of the key to generate</param>
            <param name="password">The password used to encrypted the license data</param>
            <param name="productInfo">User defined data about the product being licensed</param>
            <param name="checksumProductInfo">
            Is a checksum of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> included in the key.  The checksum is used to validate
            that the contents of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> are valid.  This is really only required if the length of
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> is 7 or more characters long.  For <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> of less 
            than 7 characters the ProductInfo is validated by the encryption algorithm. 
            </param>
            <param name="textEncoding">The encoding used to convert the key to text</param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  To use the
            licensed version of this method ensure that the file Infralution.Licensing.EncryptedLicenseProvider.lic
            exists in the same directory as the Infralution.Licensing.dll and contains a valid
            license key for the Licensing System.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,System.String)">
            <summary>
            Install a license key for the given component or control type.
            </summary>
            <remarks>
            <para>
            This method is used to install licenses for components and controls.  The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String)"/>
            method is typically better for installing application licenses because it provides more control over the 
            license key file name.  This license key file used by this method is the full type name followed by a ".lic" suffix. 
            </para>
            <para>
            This method verifies that the key is valid and if it is creates the license file and stores the license key. 
            The generic Infralution.Licensing.LicenseInstallForm uses this method to install licenses for types.  
            Client components may implement their own registration forms that call this method.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
            <param name="type">The type to install the license for</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            <para>
            This method is used to install licenses for applications.  Use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,System.String)"/>
            method to install licenses for components or controls.  If a full path is not specified for licenseFile then
            the file will be created relative to the entry executable directory.
            </para>
            <para>
            This method verifies that the key is valid and if it is creates a license file with the given name
            and stores the license key.  This method is used by client applications to allow customers to install
            a license for an application.  The generic Infralution.Licensing.LicenseInstallForm uses this method to 
            install licenses for applications.  Client applications may implement their own registration forms 
            that call this method.  
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String,System.String)">
            <summary>
            Install a license key for an application in the given file.
            </summary>
            <remarks>
            <para>
            This method is used to install licenses for applications.  Use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.Type,System.String)"/>
            method to install licenses for components or controls.  If a full path is not specified for licenseFile then
            the file will be created relative to the entry executable directory.
            </para>
            <para>
            This method verifies that the key is valid and if it is creates a license file with the given name
            and stores the license key.  This method is used by client applications to allow customers to install
            a license for an application.  The generic Infralution.Licensing.LicenseInstallForm uses this method to 
            install licenses for applications.  Client applications may implement their own registration forms 
            that call this method.  
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.InstallLicense(System.String,System.String)"/>.
            </para>
            </remarks>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseFile">The name of the file to install the license key in</param>
            <param name="licenseKey">The license key to install</param>
            <returns>A license if succesful or null/nothing if not</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)">
            <summary>
            Validate that the given license key is valid for the current licensing parameters
            </summary>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> before installing the license.
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
            <seealso cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)"/> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String,System.String)">
            <summary>
            Validate that the given license key is valid for the given licensing parameters
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseKey">The license key to validate</param>
            <returns>The encrypted license if the key is valid otherwise null</returns>
            <remarks>
            <para>
            This method provides a mechanism to validate that a given license key is valid
            prior to attempting to install it.   This can be useful if you want to check
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> before installing the license.  
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.ValidateLicenseKey(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license key if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager"/> methods to load and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            The <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> method MUST be called before using this method.  
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)">
            <summary>
            Get a license (if installed) from the given license file.
            </summary>
            <param name="licenseParameters">An XML string containing parameters used to validate the license key</param>
            <param name="licenseFile">The name of the license file containing the license key</param>
            <returns>The installed license key if any</returns>
            <remarks>
            <para>
            This method is used to read licenses for applications.  Components and controls should use the 
            <see cref="T:System.ComponentModel.LicenseManager"/> methods to read and validate licenses.  If a full path is not specified 
            for licenseFile then the file loaded will be relative to the directory containing the application 
            executable (for Window Forms applications) or aspx files (for ASP.NET applications).
            </para>
            <para>
            This method is an alternative to calling <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> followed by 
            <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException"/> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
            <remarks>
            <para>
            This method is used to get licenses for components and controls.  Applications should generally
            use the <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.String,System.String)"/> method as it provides more control over the license file
            that keys are stored in.  This method is not typically called directly by application code.  
            Instead the component or control uses the <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)"/> or
            <see cref="M:System.ComponentModel.LicenseManager.Validate(System.Type)"/> methods which find the <see cref="T:System.ComponentModel.LicenseProvider"/> for the type
            and call this method.
            </para>
            <para>
            You must call <see cref="M:Infralution.Licensing.EncryptedLicenseProvider.SetParameters(System.String)"/> before calling this method either directly or
            indirectly by via a call to <see cref="M:System.ComponentModel.LicenseManager.IsValid(System.Type)"/>
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Reflection.Assembly,System.Type)">
            <summary>
            Return the license for the given type from a given DLL assembly resources
            </summary>
            <param name="context">The license context to validate the license in</param>
            <param name="assembly">The assembly containing the license</param>
            <param name="type">The type to get the license for</param>
            <returns>The license key if any</returns>
            <remarks>
            This method can be used to check the given DLL assembly for a license.  By default the .NET licensing
            framework only checks the entry assembly (ie typically executables) for licenses.  This means
            that if a licensed control is wrapped in another control, the customer of the wrapped control will
            still required a design time license key for the original control.  This is generally the behaviour
            that control authors would like.  If however you want to provide a license that enables a customer
            to create new component/controls using your control/component then you can achieve this by using 
            this method to check for a license in the CallingAssembly that created the control/component.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ArraySize(System.Int32)">
            <summary>
            Return the array size to use when declaring an array of the given length.
            </summary>
            <param name="length">The length of the array you are declaring</param>
            <returns>The size to declare the array</returns>
            <remarks>
            This is used to account for the difference between declaring VB and C# arrays and
            permit automatic conversion of the code to VB
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.Strip(System.String,System.String)">
            <summary>
            Return the given input string stripped of the given characters
            </summary>
            <param name="value">The string to strip</param>
            <param name="characters">The characters to strip from the string</param>
            <returns>The input string with the given characters removed</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ToHex(System.Byte[])">
            <summary>
            Converts a byte array into a hexadecimal representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Hexadecimal representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.FromHex(System.String)">
            <summary>
            Converts a hexadecimal string into a byte array.
            </summary>
            <param name="hex">The hexadecimal string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ToBase32(System.Byte[])">
            <summary>
            Converts a byte array into a base 32 representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <returns>Base32 representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.FromBase32(System.String)">
            <summary>
            Converts a base32 string into a byte array.
            </summary>
            <param name="str">The base32 string to convert</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.EncodeToText(System.Byte[],Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a byte array into a text representation.
            </summary>
            <param name="data">The byte data to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>Text representation of the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.DecodeFromText(System.String,Infralution.Licensing.TextEncoding)">
            <summary>
            Converts a string into a byte array.
            </summary>
            <param name="text">The text to convert</param>
            <param name="encoding">The encoding to use</param>
            <returns>The converted byte data</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ArrayEqual(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetPasswordData(System.String,System.Int32)">
            <summary>
            Generate the password data used to verify and decrypt the license
            </summary>
            <param name="password">The password used to generate the key</param>
            <param name="keyStrength">The strength of the key to create</param>
            <returns>The password data used to verify and decrypt the license</returns> 
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.PadPassword(System.Byte[])">
            <summary>
            Pad the given password if required.
            </summary>
            <param name="passwordData">The password data to pad</param>
            <returns>The padded password data</returns> 
            <remarks>
            This function is required for backward compatibility with 7 byte passwords which were
            padded before being signed
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.Checksum(System.Byte[])">
            <summary>
            Create a checksum for the given block of data
            </summary>
            <param name="data">The block of data to create a checksum for</param>
            <returns>An integer checksum</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GenerateKey(System.Int32,System.Byte[],System.Byte[],System.Boolean,Infralution.Licensing.TextEncoding,System.Int32)">
            <summary>
            Generate a new encrypted license 
            </summary>
            <param name="keyStrength">The strength of the key to generate</param>
            <param name="passwordData">The password used to encrypted the license data</param>
            <param name="productData">User defined data about the product being licensed</param>
            <param name="checksumProductInfo">
            Is a checksum of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> included in the key.  The checksum is used to validate
            that the contents of the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> are valid.  This is really only required if the length of
            the <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> is 7 or more characters long.  For <see cref="P:Infralution.Licensing.EncryptedLicense.ProductInfo"/> of less 
            than 7 characters the ProductInfo is validated by the encryption algorithm. 
            </param>
            <param name="textEncoding">
            The encoding used to convert the key to text
            </param>
            <param name="serialNo">The unique license serial number</param>
            <returns>An encrypted license key</returns>
            <remarks>
            If there is no installed license for the Infralution Licensing System then the only 
            allowed password is "TEST" and the only allowed serial numbers are 1 or 0.  To use the
            licensed version of this method ensure that the file Infralution.Licensing.EncryptedLicenseProvider.lic
            exists in the same directory as the Infralution.Licensing.dll and contains a valid
            license key for the Licensing System.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.LoadLicense(System.ComponentModel.LicenseContext,System.Type,System.String)">
            <summary>
            Extract the license for the given type from the given licenseKey
            </summary>
            <param name="context">The current licensing context</param>
            <param name="type">The type to be licensed</param>
            <param name="licenseKey">The encrypted license key text</param>
            <returns>A license for the given type or NULL if the licenseKey was invalid</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.ReadKeyFromFile(System.String)">
            <summary>
            Read a license key from the given file
            </summary>
            <param name="licenseFile">The path to the license file to read the key from</param>
            <returns>The license key if any</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.WriteKeyToFile(System.String,System.String)">
            <summary>
            Write a license key to the given file
            </summary>
            <param name="licenseFile">The path to the license file to write the key to</param>
            <param name="licenseKey">The license key to write</param>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseKey(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the license key for the given context and type
            </summary>
            <remarks>
            This can be overridden to change where the license key is stored by the provider.   For
            instance a derived class could override this method to store the key in the Registry.
            </remarks>
            <param name="context">The license context</param>
            <param name="type">The type to get the key for</param>
            <returns>The license key</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseDirectory(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Return the directory used to store license files
            </summary>
            <param name="context">The licence context</param>
            <param name="type">The type being licensed</param>
            <returns>The directory to look for license files</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseFilePath(System.ComponentModel.LicenseContext,System.Type)">
            <summary>
            Called by GetLicenseKey to get the file path to obtain the license from (if there is no runtime license saved in the context)
            </summary>
            <remarks>
            This can be overridden to change the file used to store the design time license for the provider.   By default the
            the license file is stored in the same directory as the component executable with the name based on the fully
            qualified type name eg MyNamespace.MyControl.lic
            </remarks>
            <seealso cref="M:Infralution.Licensing.EncryptedLicenseProvider.GetLicenseKey(System.ComponentModel.LicenseContext,System.Type)"/>
            <param name="context">The licence context</param>
            <param name="type">The type to get the license for</param>
            <returns>The path of the license file</returns>
        </member>
        <member name="M:Infralution.Licensing.EncryptedLicenseProvider.GetSavedLicenseKey(System.Reflection.Assembly,System.Type)">
            <summary>
            Retrieve the license key for the given type from the given DLL/EXE assembly resources
            </summary>
            <param name="assembly">The assembly containing the license resources</param>
            <param name="type">The type to get the license key for</param>
            <returns>The license key if any</returns>
        </member>
        <member name="P:Infralution.Licensing.EncryptedLicenseProvider.UseMachineKeyStore">
            <summary>
            Determines whether RSA keys used to decrypt licenses are stored on a user or machine level
            </summary>
            <remarks>
            Setting this value to true may be useful when impersonating or running under an account 
            whose user profile is not loaded.  ILS will by default use the MachineKeyStore when there
            is no interactive user (ie services and ASP.NET) otherwise it will use the UserKeyStore.
            </remarks>
            <seealso cref="P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore"/>
        </member>
        <member name="T:Infralution.Licensing.EvaluationMonitor">
            <summary>
            Provides a mechanism for managing time/usage limited evaluations of products.
            </summary>
            <remarks>
            <para>
            Instantiate an instance of this class to read/write the evaluation parameters for the   
            given product.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate"/> is set the first time that
            the class is instantiated.  The <see cref="P:Infralution.Licensing.EvaluationMonitor.LastUseDate"/> and <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> 
            properties are set each time the class is instantiated (or once per day if
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> property is set to true).
            </para>
            <para>
            Note that evaluation data must be stored somewhere on the users 
            hard disk.  It is therefore not too difficult for a sophisticated user to determine the 
            changes made either to registry keys or files (using file/registry monitoring software) 
            and restore the state of these to their pre-installation state (thus resetting the 
            evaluation period).  For this reason it is recommended that you don't rely on this 
            mechanism alone.  You should also consider limiting the functionality of your product 
            in some way or adding nag screens to discourage long term use of evaluation versions.
            </para>
            <para>
            If you have a data oriented application you can increase the security of evaluations by
            storing the current <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> somewhere in your database each time the 
            application runs and cross checking this with the number returned by the EvaluationMonitor.
            </para>
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="countUsageOncePerDay">Should the usage count only be incremented once per day</param>
            <param name="productID">A string which uniquely identifies the product</param>
            <remarks>
            If countUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is only incremented once
            for each day that the product is actually used.   If countUsageOncePerDay is false then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/>
            is incremented each time a new evaluation monitor is instantiated for a product
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.#ctor(System.String)">
            <summary>
            Initialize a new instance of the evaluation monitor.
            </summary>
            <param name="productID">A string which uniquely identifies the product</param>
            <remarks>
            For backward compatibility this overloaded constructor sets the <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/>
            property to false.
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Reset">
            <summary>
            Allows you to reset the evaluation period.
            </summary>
            <remarks>
            This may be useful if a customer needs an extension or if somehow they
            invalidate their evaluation data by attempting to fiddle
            </remarks>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.FindBaseKey(Microsoft.Win32.RegistryKey)">
            <summary>
            Find the base key for this product
            </summary>
            <param name="parent">The key to search under</param>
            <returns>The base registry key used to store the data</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.CreateBaseKey(Microsoft.Win32.RegistryKey)">
            <summary>
            Create the base key for this product
            </summary>
            <param name="parent">The key to place the information under</param>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.UpdateData">
            <summary>
            Update the registry data
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.GetUsageData">
            <summary>
            Get the number of times the product has been used (and increment)
            </summary>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Encrypt(System.String)">
            <summary>
            Encrypt the given text
            </summary>
            <param name="text">The text to encrypt</param>
            <returns>Encrypted byte array</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Decrypt(System.Byte[])">
            <summary>
            Decrypt the given byte data to text
            </summary>
            <param name="data">The byte data to decrypt</param>
            <returns>The decrypted text</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.EncryptDate(System.DateTime)">
            <summary>
            Encrypt a date
            </summary>
            <param name="date">The date to encrypt</param>
            <returns>The encrypted date data</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.DecryptDate(System.Byte[])">
            <summary>
            Decrypt a date
            </summary>
            <param name="data">The data to decrypt</param>
            <returns>The descryped date</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Equals(System.Byte[],System.Byte[])">
            <summary>
            Are the contents of the two byte arrays equal
            </summary>
            <param name="a1">The first array</param>
            <param name="a2">The second array </param>
            <returns>True if the contents of the arrays is equal</returns>
        </member>
        <member name="M:Infralution.Licensing.EvaluationMonitor.Dispose">
            <summary>
            Free resources used by the EvaluationMonitor
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay">
            <summary>
            Set/Get whether the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> should be incremented only once per day 
            </summary>
            <remarks>
            </remarks>
            <remarks>
            If CountUsageOncePerDay is set to true then the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is only incremented once
            for each day that the product is actually used.   If CountUsageOncePerDay is false then 
            the <see cref="P:Infralution.Licensing.EvaluationMonitor.UsageCount"/> is incremented each time a new evaluation monitor is instantiated for 
            a given product id. 
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.UsageCount">
            <summary>
            Return the number of times the product has been used 
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is set to true then the UsageCount is only incremented once
            for each day that the product is actually used.   If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is false then 
            the UsageCount is incremented each time a new evaluation monitor is instantiated for 
            a given product id.  Typically you should instantiate an EvaluationMonitor object just once in your 
            software.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.FirstUseDate">
            <summary>
            Return the date/time the product was first used
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.LastUseDate">
            <summary>
            Return the date/time the product was last used
            </summary>
            <remarks>
            If <see cref="P:Infralution.Licensing.EvaluationMonitor.CountUsageOncePerDay"/> is set to true then this is the date
            at which the usage count was last updated - otherwise it is the date at 
            which the EvaluationMonitor was last created.
            </remarks>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.DaysInUse">
            <summary>
            Return the number of days since the product was first run.
            </summary>
        </member>
        <member name="P:Infralution.Licensing.EvaluationMonitor.Invalid">
            <summary>
            Returns true if the evaluation monitor detects attempts to circumvent
            evaluation limits by tampering with the hidden evaluation data or winding
            the PC clock backwards 
            </summary>
        </member>
        <member name="T:Infralution.Licensing.PublicEncryptedLicenseProvider">
            <summary>
            Forwards licensing requests to the internal provider.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.PublicEncryptedLicenseProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infralution.Licensing.PublicEncryptedLicenseProvider"/> class.
            </summary>
        </member>
        <member name="M:Infralution.Licensing.PublicEncryptedLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
            <summary>
            Get a license (if installed) for the given component/control type 
            </summary>
            <param name="context">The context (design or runtime)</param>
            <param name="type">The type to get the license for</param>
            <param name="instance">The object the license is for</param>
            <param name="allowExceptions">If true a <see cref="T:System.ComponentModel.LicenseException"/> is thrown if a valid license cannot be loaded</param>
            <returns>An encrypted license</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.MaskedTextBox">
            <summary>
            Supports restricted entry into a text box.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.MaskedTextBox.MaskProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.MaskedTextBox.Mask"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.MaskedTextBox.ResetOnSpaceProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.MaskedTextBox.ResetOnSpace"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.MaskedTextBox.MaskCompletedProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.MaskedTextBox.MaskCompleted"/> dependency property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MaskedTextBox.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.MaskedTextBox"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MaskedTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Adds class handling for the <see cref="E:System.Windows.UIElement.PreviewKeyDown"/> event.
            </summary>
            <param name="e">The data associated with the event.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MaskedTextBox.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Adds class handling for the <see cref="E:System.Windows.UIElement.TextInput"/> event.
            </summary>
            <param name="e">The data associated with the event.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.MaskedTextBox.Mask">
            <summary>
            Gets or sets the input mask to use at run time.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.MaskedTextBox.MaskProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.MaskedTextBox.ResetOnSpace">
            <summary>
            Gets or sets a value that determines how a space input character should be handled.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.MaskedTextBox.ResetOnSpaceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.MaskedTextBox.MaskCompleted">
            <summary>
            Gets a value indicating whether all required inputs have been entered into the input mask.
            This is a dependency property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.BuiltInEditor">
            <summary>
            Provides value editing services built into the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> control.
            </summary>
            <remarks>This class supports the implementation of the PropertyGrid control; it is not
            intended for use from user code.</remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ObjectWrappingEditor">
            <summary>
            Provides value editing services for values accessed as properties on another object.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Editor">
            <summary>
            Provides value editing services to a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Editor.CanEdit(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            When overridden in a derived class, indicates whether the editor can edit the
            value of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>true if the editor can edit the value of this node; otherwise false.</returns>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Editor.EditorTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Editor.AllowExpandProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.Editor.AllowExpand"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.Editor.HostStyleProperty">
            <summary>
            Identifies the HostStyle attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Editor.SetHostStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>
            Sets the value of the HostStyle attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
            <remarks>The HostStyle property is used by internal elements of the editor template.  User code
            should not set the HostStyle property directly.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Editor.GetHostStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the HostStyle attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element from which to read the property value.</param>
            <returns>The value of the HostStyle attached property.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Editor.BuildTemplate(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            When overridden in a derived class, constructs a <see cref="T:System.Windows.DataTemplate"/> which can
            be bound to the specified node in order to edit its value.
            </summary>
            <param name="node">The node to be edited.</param>
            <returns>A data template suitable for editing this node.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> which the editor uses to present or edit
            node values.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Editor.EditorTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Editor.AllowExpand">
            <summary>
            Gets or sets whether the user should be allowed to expand a node edited by this.
            editor.  This is a dependency property.
            </summary>
            <remarks>
            <para>If false, the user cannot expand a node that is handled by this editor: all
            editing is done via the editor.  If true, the user can expand the node if it has
            subproperties: this allows the user to edit a record "one bit at a time" via the
            expansion or to edit it "as a whole" via this editor.  This is also useful for displaying
            a read-only summary even if all modifications must be done via subproperties.
            The default is false.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.Editor.AllowExpandProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.EditContextProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.EditContext"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.BuildTemplate(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Constructs a <see cref="T:System.Windows.DataTemplate"/> which can be bound to the specified node
            to edit its value.
            </summary>
            <param name="node">The node for which an editor is required.</param>
            <returns>A data template for editing the node value.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.SetContentTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            When overridden in a derived class, sets the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate"/>
            property of the specified <see cref="T:System.Windows.FrameworkElementFactory"/> to the required data template.
            </summary>
            <param name="factory">The FrameworkElementFactory on which the ContentTemplateProperty
            must be set.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.OnCustomizeTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Allows derived classes to customize the visual tree of the template constructed in 
            <see cref="M:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.BuildTemplate(Mindscape.WpfPropertyGrid.Node)"/>, for example by setting up additional properties.
            </summary>
            <param name="factory">The FrameworkElementFactory that defines the template visual tree.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.EditContext">
            <summary>
            Gets or sets an object which is made available to the editor template
            through the EditContext binding.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.ObjectWrappingEditor.EditContextProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditor.#ctor(Mindscape.WpfPropertyGrid.BuiltInEditorStyleCollection)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.BuiltInEditor"/> class.
            </summary>
            <param name="builtInEditorStyles">The styles to be applied to built-in editors.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditor.CanEdit(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Indicates whether the editor can edit the value of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>true if the editor can edit the value of this node; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditor.GetEditSettings(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Gets the built-in editing behaviour for the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>An <see cref="T:Mindscape.WpfPropertyGrid.InPlaceEditing"/> describing the edit capabilities.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditor.SetContentTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Attaches the editor data template to the appropriate predefined template resource.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditor.OnCustomizeTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Propagates host style overrides to the data template visual tree.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.BuiltInEditorStyle">
            <summary>
            Supports styling of built-in editors.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.EditorKeyProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.EditorKey"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.StyleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.Style"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.EditorKey">
            <summary>
            Gets or sets the key of the built-in editor to the style will be applied.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.EditorKeyProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.Style">
            <summary>
            Gets or sets the style to be applied to the built-in editor.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.BuiltInEditorStyle.StyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.BuiltInEditorStyleCollection">
            <summary>
            Represents a collection of <see cref="T:Mindscape.WpfPropertyGrid.BuiltInEditorStyle"/> objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.BuiltInEditorStyleCollection.FindStyle(System.Object)">
            <summary>
            Finds the <see cref="T:System.Windows.Style"/> associated with the specified editor.
            </summary>
            <param name="editorKey">The key identifying the editor to search for.</param>
            <returns>The Style associated with the editor key in this collection if there is one;
            otherwise null.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.CollectionElement">
            <summary>
            A property grid entry representing an indexed property -- specifically an item in a list or
            dictionary.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Node">
            <summary>
            Represents an entry in a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Node.#ctor(System.Object,System.Reflection.PropertyInfo,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Node"/> class.
            </summary>
            <param name="source">The object whose property is being represented.</param>
            <param name="property">The property being represented.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Node.#ctor(System.Object,System.Reflection.PropertyInfo,System.Predicate{Mindscape.WpfPropertyGrid.Node},Mindscape.WpfPropertyGrid.NodeEditor)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Node"/> class.
            </summary>
            <param name="source">The object whose property is being represented.</param>
            <param name="property">The property being represented.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
            <param name="inPlaceEditor">The editor to be used for this node.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.ChildFilter">
            <summary>
            Gets a callback for determining whether to show descendant nodes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.Source">
            <summary>
            Gets the object whose property is represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.Name">
            <summary>
            Gets the name of the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.Property">
            <summary>
            Gets the metadata for the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.PropertyInfo">
            <summary>
            Gets the metadata for the property represented by this node.
            </summary>
            <remarks>It is recommended that you use <see cref="P:Mindscape.WpfPropertyGrid.Node.Property"/> rather than PropertyInfo,
            as PropertyInfo is not supported in partial trust situations.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.DeclaringType">
            <summary>
            Gets the type which declares the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.HasOwnInPlaceEditor">
            <summary>
            Gets whether the node has an editor associated directly with it.
            </summary>
            <remarks>Most nodes use the editing services provided by the property grid, and are
            allocated an editor based on type and/or property name.  However, if an application
            explicitly adds a node to the grid, it can specify an editor for that node.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.InPlaceEditor">
            <summary>
            Gets the editor associated directly with this node, if there is one.
            </summary>
            <remarks>Most nodes use the editing services provided by the property grid, and are
            allocated an editor based on type and/or property name.  However, if an application
            explicitly adds a node to the grid, it can specify an editor for that node.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.Children">
            <summary>
            Gets the displayable children of this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.IndexedPropertyArguments">
            <summary>
            When overridden in a derived class, gets the index(es) of the instance of the property
            represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.CanWrite">
            <summary>
            When overridden in a derived class, gets whether the node value can be modified.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.HumanName">
            <summary>
            When overridden in a derived class, gets a display name for the node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Node.Value">
            <summary>
            When overridden in a derived class, gets the value of the property represented by
            this node.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.FromDictionary(System.Collections.IDictionary,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Creates <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> objects for each item in a dictionary.
            </summary>
            <param name="source">The dictionary.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
            <returns>A <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> for each item in the dictionary.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.FromList(System.Collections.IList,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Creates <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> objects for each item in a list.
            </summary>
            <param name="source">The list.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
            <returns>A <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> for each item in the list.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.GetCollectionElements(System.Object,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Creates <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> objects for each item in a collection.
            </summary>
            <param name="source">The source collection - a list or dictionary.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
            <returns>A <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> for each item in the list.  If the source is not
            a list or dictionary, no CollectionElements are returned.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.#ctor(System.Object,Mindscape.WpfPropertyGrid.CollectionTypeOperations,System.Object,System.Boolean,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.CollectionElement"/> class.
            </summary>
            <param name="source">The object whose collection property is being represented.</param>
            <param name="typeOperations">The collection methods and properties for operating on this node.</param>
            <param name="index">The index or key in the collection of this element.</param>
            <param name="useIndexAsFullDisplayName">If true, the index alone is used as the display name;
            if false, the property name and index are combined to create a display name.  (The former is
            typically the best option for dictionary-type collections, where the keys may be meaningful
            in themselves; the latter is typically better for list-type collections, where the keys
            are plain integers.)</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.RemoveFromParentCollection">
            <summary>
            Removes the element represented by this node from the collection of
            which it is a part.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionElement.CanRemoveFromParentCollection">
            <summary>
            Determines whether the element represented by this node can be removed
            from the collection of which it is a part.
            </summary>
            <returns>true if the element can be removed from its parent collection;
            otherwise false.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionElement.CanWrite">
            <summary>
            Gets whether the collection element can be modified.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionElement.Value">
            <summary>
            Gets the value of the collection element.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionElement.PropertyType">
            <summary>
            Gets the type of the collection element.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionElement.IndexedPropertyArguments">
            <summary>
            Gets the index(es) of the collection element.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionElement.HumanName">
            <summary>
            Gets a display name for the collection element.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.CollectionElement.PropertyChanged">
            <summary>
            Raised when a property changes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.CollectionTypeOperations">
            <summary>
            Represents standard operations on a collection type.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionTypeOperations.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.CollectionTypeOperations"/> class.
            </summary>
            <param name="type">The collection type.</param>
            <param name="itemProperty">The name of the property used to access items by index.</param>
            <param name="removalMethod">The name of the method used to remove items by index.</param>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.CollectionTypeOperations.Dictionary">
            <summary>
            Gets the <see cref="T:Mindscape.WpfPropertyGrid.CollectionTypeOperations"/> for the <see cref="T:System.Collections.IDictionary"/> type.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.CollectionTypeOperations.List">
            <summary>
            Gets the <see cref="T:Mindscape.WpfPropertyGrid.CollectionTypeOperations"/> for the <see cref="T:System.Collections.IList"/> type.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionTypeOperations.ItemProperty">
            <summary>
            Gets the property for accessing items using their indexes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.CollectionTypeOperations.RemovalMethod">
            <summary>
            Gets the method for removing items using their indexes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NotifyingColor">
            <summary>
            A wrapper for the <see cref="T:System.Windows.Media.Color"/> type that provides property change
            notifications.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NotifyingColor.ToColor">
            <summary>
            Returns the color of this <see cref="T:Mindscape.WpfPropertyGrid.NotifyingColor"/>.
            </summary>
            <returns>The color of this NotifyingColor.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NotifyingColor.SetFromColor(System.Windows.Media.Color)">
            <summary>
            Sets this <see cref="T:Mindscape.WpfPropertyGrid.NotifyingColor"/> to wrap the specified color.
            </summary>
            <param name="color">The color to wrap.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NotifyingColor.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfPropertyGrid.NotifyingColor.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property whose value has changed.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NotifyingColor.A">
            <summary>
            Gets or sets the alpha channel value of the color.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NotifyingColor.R">
            <summary>
            Gets or sets the red channel value of the color.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NotifyingColor.G">
            <summary>
            Gets or sets the green channel value of the color.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NotifyingColor.B">
            <summary>
            Gets or sets the blue channel value of the color.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.NotifyingColor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.CursorKeyMode">
            <summary>
            Determines how the grid handles cursor keys when typed into editors.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.CursorKeyMode.Navigate">
            <summary>
            Cursor keys are intercepted by the grid and used to change the selection.
            This is the default.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.CursorKeyMode.PassToEditor">
            <summary>
            Cursor keys are passed to the editor.  The user may still use the cursor
            keys to change the selection, but only when the focus is on a property
            name rather than an editor.  Choose this option if you use editors that
            have special handling for cursor keys such as <see cref="T:Mindscape.WpfPropertyGrid.NumericUpDown"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.IPropertyInfo">
            <summary>
            Provides access to property metadata.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.IPropertyInfo.GetIndexParameters">
            <summary>
            Returns an array of all the index parameters for the property.
            </summary>
            <returns>An array containing index parameter metadata.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.IPropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Returns the value of the property.
            </summary>
            <param name="obj">The object whose property value will be returned.</param>
            <param name="invokeAttr">The invocation attribute.</param>
            <param name="binder">A reflection binder, or null to use the default binder.</param>
            <param name="index">The index values for indexed properties, or null for 
            non-indexed properties.</param>
            <param name="culture">The culture to use for localization.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.IPropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
            Sets the value of the property.
            </summary>
            <param name="obj">The object whose property value will be set.</param>
            <param name="value">The value to which to set the property.</param>
            <param name="invokeAttr">The invocation attribute.</param>
            <param name="binder">A reflection binder, or null to use the default binder.</param>
            <param name="index">The index values for indexed properties, or null for 
            non-indexed properties.</param>
            <param name="culture">The culture to use for localization.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.Attributes">
            <summary>
            Gets the attributes for the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.CanRead">
            <summary>
            Gets a value indicating whether the property can be read.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.CanWrite">
            <summary>
            Gets a value indicating whether the property can be written to.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.DeclaringType">
            <summary>
            Gets the class that declares this property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.DisplayName">
            <summary>
            Gets the display name of the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.Category">
            <summary>
            Gets the category of the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.Description">
            <summary>
            Gets the description of the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.IsBrowsable">
            <summary>
            Gets whether the property should be displayed in the grid.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.Converter">
            <summary>
            Gets the type converter for this property.
            </summary>
            <remarks>This may return null if no type converter is defined for the property.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.AsPropertyInfo">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> representing this property.
            </summary>
            <remarks>This member is provided primarily for compatibility.  Applications 
            should use IPropertyInfo members to access metadata unless they must interface to
            code that expects a <see cref="T:System.Reflection.PropertyInfo"/>.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IPropertyInfo.AsPropertyDescriptor">
            <summary>
            Gets a <see cref="T:System.ComponentModel.PropertyDescriptor"/> representing this property.
            </summary>
            <remarks>This member is provided primarily for compatibility.  Applications 
            should use IPropertyInfo members to access metadata unless they must interface to
            code that expects a <see cref="T:System.ComponentModel.PropertyDescriptor"/>.</remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.EditorCollection">
            <summary>
            A collection of <see cref="T:Mindscape.WpfPropertyGrid.Editor"/> objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.EditorCollection"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorCollection.InsertItem(System.Int32,Mindscape.WpfPropertyGrid.Editor)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ListSelectDisplayContext">
            <summary>
            Provides display context information for options in list-selection editors.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ListSelectDisplayContext.GetPropertyInfo(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the PropertyInfo attached property of the specified element.
            </summary>
            <param name="obj">The element from which to read the value.</param>
            <returns>The PropertyInfo associated with the specified element.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ListSelectDisplayContext.SetPropertyInfo(System.Windows.DependencyObject,Mindscape.WpfPropertyGrid.IPropertyInfo)">
            <summary>
            Sets the value of the PropertyInfo attached property of the specified element.
            </summary>
            <param name="obj">The element on which to set the value.</param>
            <param name="value">The PropertyInfo to be associated with the specified element.</param>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.ListSelectDisplayContext.PropertyInfoProperty">
            <summary>
            Identifies the PropertyInfo attached property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Many">
            <summary>
            Represents a property that may have different values across the selected objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Many.Reset">
            <summary>
            Resets the property to a default value across all objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Many.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfPropertyGrid.Many.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property which is changing.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Many.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfPropertyGrid.Many.PropertyChanging"/> event.
            </summary>
            <param name="propertyName">The property which is changing.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.PropertyTypeName">
            <summary>
            Gets the (short) name of the data type of the property.
            </summary>
            <remarks>This property is equivalent to <see cref="P:Mindscape.WpfPropertyGrid.Many.PropertyType"/>.Name and is provided
            as a helper for partial trust scenarios.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.PropertyType">
            <summary>
            Gets the data type of the property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.Values">
            <summary>
            Gets the values across the selected objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.RawValue">
            <summary>
            Gets the value (if available).  This value is meaningful only if
            <see cref="P:Mindscape.WpfPropertyGrid.Many.IsConsistent"/> is true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.IsConsistent">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindscape.WpfPropertyGrid.Many"/> contains
            consistent values.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many.IsReadOnly">
            <summary>
            Gets whether the property value is read-only.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.Many.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.Many.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Many`1">
            <summary>
            Represents a property that may have different values across the selected objects.
            </summary>
            <typeparam name="T">The static type of the property.</typeparam>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Many`1.Reset">
            <summary>
            Resets the property to a default value across all objects.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many`1.RawValue">
            <summary>
            Gets the value (if available).  This value is meaningful only if
            <see cref="P:Mindscape.WpfPropertyGrid.Many`1.IsConsistent"/> is true.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many`1.IsConsistent">
            <summary>
            Gets a value indicating whether the <see cref="T:Mindscape.WpfPropertyGrid.Many"/> contains
            consistent values.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many`1.Value">
            <summary>
            Gets or sets the value of the property.  Getting the value is meaningful
            only when <see cref="P:Mindscape.WpfPropertyGrid.Many`1.IsConsistent"/> is true.  Setting the value sets the
            property value on all objects in the <see cref="T:Mindscape.WpfPropertyGrid.Many"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Many`1.PropertyType">
            <summary>
            Gets the data type of the property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.MultipleObjectWrapper">
            <summary>
            Represents multiple objects which are to be displayed in a combined view.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MultipleObjectWrapper.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.MultipleObjectWrapper"/> class.
            </summary>
            <param name="wrapped">The objects to be wrapped.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.MultipleObjectWrapper.#ctor(System.Collections.IList)">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.MultipleObjectWrapper"/> class.
            </summary>
            <param name="wrapped">The objects to be wrapped.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.MultipleObjectWrapper.Objects">
            <summary>
            Gets the wrapped objects.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.MultipleObjectWrapper.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.MultipleObjectWrapper.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NodeEditor">
            <summary>
            Provides value editing services for a single node instance.
            </summary>
            <remarks>Node editors are usually constructed for you by the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>;
            you should not need to use this class in your code.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NodeEditor.CanEdit(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Indicates whether the editor can edit the value of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>true if the editor can edit the value of this node; otherwise false.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.StaticNodeEditor">
            <summary>
            Provides value editing services for a single node instance, using a static 
            <see cref="T:System.Windows.DataTemplate"/> defined in the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/> property.
            </summary>
            <remarks>Node editors are usually constructed for you by the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>;
            you should not need to use this class in your code.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.StaticNodeEditor.SetContentTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Attaches the editor data template to the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/>.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DynamicNodeEditor">
            <summary>
            Provides value editing services for a single node instance, using an external
            <see cref="T:System.Windows.DataTemplate"/> referenced via a resource key.
            </summary>
            <remarks>Node editors are usually constructed for you by the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>;
            you should not need to use this class in your code.</remarks>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.DynamicNodeEditor.EditorTemplateKeyProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.DynamicNodeEditor.EditorTemplateKey"/> dependency property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DynamicNodeEditor.SetContentTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Attaches the editor data template to the data template identified by the <see cref="P:Mindscape.WpfPropertyGrid.DynamicNodeEditor.EditorTemplateKey"/>.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DynamicNodeEditor.EditorTemplateKey">
            <summary>
            Gets or sets the resource key of the data template.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ObjectWrapperFactory">
            <summary>
            Creates strongly-typed <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/> objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapperFactory.CreateWrapper(Mindscape.WpfPropertyGrid.Node,System.Boolean)">
            <summary>
            Creates a strongly-typed <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/>.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
            <returns>A wrapper which can be used to get or set the property value in a
            property-agnostic way.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapperFactory.CreateWrapper(Mindscape.WpfPropertyGrid.Node,System.Boolean,System.Object)">
            <summary>
            Creates a strongly-typed <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/>.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
            <param name="editContext">Additional user-specified information to be made available to 
            consumers of the ObjectWrapper.</param>
            <returns>A wrapper which can be used to get or set the property value in a
            property-agnostic way.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ObjectWrapper">
            <summary>
            A wrapper class which allows the data binding infrastructure to get or set property values
            without knowing the name of the property being accessed.
            </summary>
            <remarks>This class supports the WPF data binding infrastructure and is not intended for
            use from user code.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapper.#ctor(Mindscape.WpfPropertyGrid.Node,System.Boolean,System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/> class.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
            <param name="editContext">Additional user-specified information to be made available to
            consumers of the ObjectWrapper.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapper.#ctor(Mindscape.WpfPropertyGrid.Node,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper"/> class.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.Editable">
            <summary>
            Gets whether the property can be modified.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.EditContext">
            <summary>
            Gets optional additional user-specified information specified in an editor declaration.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.UnderlyingObject">
            <summary>
            Gets the wrapped object.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.PropertyName">
            <summary>
            Gets the wrapped property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.Property">
            <summary>
            Gets the wrapped property.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.ObjectWrapper.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper.DataType">
            <summary>
            Gets the declared type of the value.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ObjectWrapper`1">
            <summary>
            A wrapper class which allows the data binding infrastructure to get or set property values
            without knowing the name of the property being accessed.
            </summary>
            <remarks>This class supports the WPF data binding infrastructure and is not intended for
            use from user code.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapper`1.#ctor(Mindscape.WpfPropertyGrid.Node,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper`1"/> class.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObjectWrapper`1.#ctor(Mindscape.WpfPropertyGrid.Node,System.Boolean,System.Object)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.ObjectWrapper`1"/> class.
            </summary>
            <param name="property">The property whose value is to be accessed through the wrapper.</param>
            <param name="editable">Whether the value can be modified.</param>
            <param name="editContext">Additional user-specified information to be made available to
            consumers of the ObjectWrapper.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper`1.Value">
            <summary>
            Gets or sets the value of the wrapped property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObjectWrapper`1.DataType">
            <summary>
            Gets the declared type of the value.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ObservableDictionary`2">
            <summary>
            Represents a dictionary that provides notifications when items get added, removed,
            or when the whole list is refreshed.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfPropertyGrid.ObservableDictionary`2.CollectionChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Mindscape.WpfPropertyGrid.ObservableDictionary`2.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The event data.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the collection contains an element with the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the collection contains an element with the key; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element was removed from the collection; otherwise false.  The
            method returns false if the item was not present in the collection.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When the method returns, contains the value associated with the
            specified key, if the key is found; otherwise, the default value for the type of the
            value parameter.</param>
            <returns>true if the dictionary contains an element with the specified key;
            otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the collection with the specified key.
            </summary>
            <param name="item">A structure representing the key and value to add
            to the collection.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the collection contains a specific key and value.
            </summary>
            <param name="item">The key-value pair to locate in the collection.</param>
            <returns>true if the key-value pair is found in the collection; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array.
            </summary>
            <param name="array">The array to which to copy the elements of the collection.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> where copying starts.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The key and value to remove.</param>
            <returns>true if the element was removed from the collection; otherwise false.  The
            method returns false if the item was not present in the collection.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator for the dictionary.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the dictionary.
            </summary>
            <returns>An enumerator for the dictionary.</returns>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.ObservableDictionary`2.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, or changed, or the entire list is refreshed.
            </summary>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.ObservableDictionary`2.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the dictionary.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.Count">
            <summary>
            Gets the number of key-value pairs in the collection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.IsFixedSize">
            <summary>
            Gets whether the dictionary is fixed size.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.IsSynchronized">
            <summary>
            Gets whether the dictionary is synchronized.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.ObservableDictionary`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the dictionary.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyNode">
            <summary>
            A property grid entry representing a non-indexed property on an object.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyNode.#ctor(System.Object,System.Reflection.PropertyInfo,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyNode"/> class.
            </summary>
            <param name="source">The object whose property is being represented.</param>
            <param name="property">The property being represented.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyNode.#ctor(System.Object,System.String,System.Reflection.PropertyInfo,System.Predicate{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyNode"/> class.
            </summary>
            <param name="source">The object whose property is being represented.</param>
            <param name="caption">A human-readable display name for this property.</param>
            <param name="property">The property being represented.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyNode.#ctor(System.Object,System.String,System.Reflection.PropertyInfo,System.Predicate{Mindscape.WpfPropertyGrid.Node},Mindscape.WpfPropertyGrid.NodeEditor)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyNode"/> class.
            </summary>
            <param name="source">The object whose property is being represented.</param>
            <param name="caption">A human-readable display name for this property.</param>
            <param name="property">The property being represented.</param>
            <param name="inPlaceEditor">The editor to be used for this node.</param>
            <param name="childFilter">A callback for determining whether to show descendant nodes.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyNode.Value">
            <summary>
            Gets the value of the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyNode.CanWrite">
            <summary>
            Gets whether the property value can be modified.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyNode.PropertyType">
            <summary>
            Gets the type of the property represented by this node.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyNode.IndexedPropertyArguments">
            <summary>
            Gets the indexed property arguments.  For a <see cref="T:Mindscape.WpfPropertyGrid.PropertyNode"/>, the property
            is always non-indexed and this always returns null.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyNode.HumanName">
            <summary>
            Gets a display name for the node.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyEditor">
            <summary>
            Provides value editing services for a named property of a specified type.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyEditor.DeclaringTypeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyEditor.DeclaringType"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyEditor.PropertyNameProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyEditor.PropertyName"/> dependency property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyEditor.CanEdit(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Indicates whether the editor can edit the value of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>true if the editor can edit the value of this node; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyEditor.SetContentTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Attaches the editor data template to the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/>.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyEditor.OnCustomizeTemplate(System.Windows.FrameworkElementFactory,Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Propagates the <see cref="P:Mindscape.WpfPropertyGrid.PropertyEditor.Style"/> of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyEditor"/> object to the
            data template visual tree.
            </summary>
            <param name="factory">The FrameworkElementFactory representing the data template under construction.</param>
            <param name="node">The node which the template will edit.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyEditor.DeclaringType">
            <summary>
            Gets or sets the type on which the property is declared.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyEditor.DeclaringTypeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyEditor.PropertyName">
            <summary>
            Gets or sets the property handled by this editor.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyEditor.PropertyNameProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyEditor.Style">
            <summary>
            Gets or sets the editor style.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:System.Windows.FrameworkElement.StyleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView">
            <summary>
            Manages view state for the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGridBindingView.#ctor(System.Collections.ObjectModel.ObservableCollection{Mindscape.WpfPropertyGrid.Node})">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> class.
            </summary>
            <param name="properties">The set of nodes of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGridBindingView.DefaultView">
            <summary>
            Gets the default view of this collection.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyGridRow">
            <summary>
            Contains view state for a single row of a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGridRow.#ctor(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/> class.
            </summary>
            <param name="node">The node displayed on this row.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGridRow.Node">
            <summary>
            Gets the node displayed on this row.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGridRow.IsLeaf">
            <summary>
            Gets whether this row is a leaf node (i.e. has no children).
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGridRow.Children">
            <summary>
            Gets a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> of the children of the node
            displayed on this row.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyGrouping">
            <summary>
            Contains standard property grouping strategies.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrouping.ByCategory">
            <summary>
            Gets a GroupDescription which groups properties by their Category attribute.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertySorting">
            <summary>
            Contains standard property sorting strategies.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertySorting.ByHumanName">
            <summary>
            Gets an IComparer which sorts properties by their display names.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventHandler">
            <summary>
            Represents the method that will handle the SelectedGridItemChanged event of a
            <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventArgs">
            <summary>
            Provides data for the SelectedGridItemChanged event of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventArgs.#ctor(Mindscape.WpfPropertyGrid.PropertyGridRow,Mindscape.WpfPropertyGrid.PropertyGridRow)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventArgs"/> type.
            </summary>
            <param name="oldSelection">The previously selected <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.</param>
            <param name="newSelection">The newly selected <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventArgs.NewSelection">
            <summary>
            Gets the newly selected <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.SelectedGridItemChangedEventArgs.OldSelection">
            <summary>
            Gets the previously selected <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TypeEditor">
            <summary>
            Provides a value editing service for all values of a given type.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TypeEditor.EditedTypeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.TypeEditor.EditedType"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TypeEditor.TemplateBindingModeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.TypeEditor.TemplateBindingMode"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TypeEditor.CanEdit(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Indicates whether the editor can edit the value of the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>true if the editor can edit the value of this node; otherwise false.</returns>
            <remarks>A <see cref="T:Mindscape.WpfPropertyGrid.TypeEditor"/> will attempt to edit any node whose declared 
            <see cref="P:Mindscape.WpfPropertyGrid.Node.PropertyType"/> is compatible with its <see cref="P:Mindscape.WpfPropertyGrid.TypeEditor.EditedType"/>.  To prevent
            a TypeEditor from claiming derived types, specify a more specific TypeEditor earlier in the
            <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Editors"/> collection.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TypeEditor.BuildTemplate(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Constructs a <see cref="T:System.Windows.DataTemplate"/> which can be bound to the specified node
            to edit its value.
            </summary>
            <param name="node">The node for which an editor is required.</param>
            <returns>A data template for editing the node value.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.TypeEditor.EditedType">
            <summary>
            The type of value that this editor can edit.  This is a dependency property.
            </summary>
            <remarks>
            <para>The object to which the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/> will be bound is of
            this type; therefore the template can reference member properties of this type without
            qualification.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.TypeEditor.EditedTypeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.TypeEditor.TemplateBindingMode">
            <summary>
            Gets or sets the way in which the <see cref="P:Mindscape.WpfPropertyGrid.Editor.EditorTemplate"/> is bound to the
            property value.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.TypeEditor.TemplateBindingModeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TypeEditorTemplateBindingMode">
            <summary>
            Specifies whether a <see cref="T:Mindscape.WpfPropertyGrid.TypeEditor"/> acts on a property reference (appropriate
            for reference types) or on a value (appropriate for value types).  This is normally
            inferred by the editor according to the edited type, but may be overridden if required.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TypeEditorTemplateBindingMode.Default">
            <summary>
            The TypeEditor infers how to act on the property depending on whether it is a
            reference or a value type.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TypeEditorTemplateBindingMode.Reference">
            <summary>
            The TypeEditor considers properties of the edited type to be references.  The
            template binds directly to properties of the edited property value.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TypeEditorTemplateBindingMode.WrappedValue">
            <summary>
            The TypeEditor considers properties of the edited type to be values.  The
            template binds to a pseudo-property named Value.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NumericUpDown">
            <summary>
            A control for editing an integer value with additional "up" and "down" commands.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.NumericUpDown.ValueBoxPartName">
            <summary>
            Identifies the template part responsible for displaying the value.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.NumericUpDown.IncreaseCommand">
            <summary>
            A command for increasing the value.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.NumericUpDown.DecreaseCommand">
            <summary>
            A command for decreasing the value.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NumericUpDown.OnApplyTemplate">
            <summary>
            Called when a template is applied to the <see cref="T:Mindscape.WpfPropertyGrid.NumericUpDown"/> control.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NumericUpDownRepeatButton">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.Primitives.RepeatButton"/> used in a <see cref="T:Mindscape.WpfPropertyGrid.NumericUpDown"/> control.
            This allows theme styling of the up-down buttons without retemplating the entire control.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DayTemplateSelector">
            <summary>
            Used by the date editor to manage cells for which there is no valid date.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DayTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects the appropriate data template depending on whether the item is
            a DateTime or not.
            </summary>
            <param name="item">The item for which to select a template.</param>
            <param name="container">The container element.</param>
            <returns>A <see cref="T:System.Windows.DataTemplate"/> suitable for displaying the item.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DayTemplateSelector.DayTemplate">
            <summary>
            The template for valid dates.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.DayTemplateSelector.NonDayTemplate">
            <summary>
            The template for cells beyond the range of the CLR DateTime type.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.IExtendInPlaceEditors">
            <summary>
            Represents an object which extends the repertoire of editors available to
            a <see cref="T:System.Windows.Controls.DataTemplateSelector"/>.
            </summary>
            <seealso cref="T:Mindscape.WpfPropertyGrid.Editor"/>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IExtendInPlaceEditors.Editors">
            <summary>
            Gets the list of additional editors available for selection.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.IExtendInPlaceEditors.BuiltInEditorStyles">
            <summary>
            Gets the list of styles available for customising built-in editors.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.EditorSelector">
            <summary>
            Selects an editor for a value.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorSelector.#ctor(Mindscape.WpfPropertyGrid.IExtendInPlaceEditors)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.EditorSelector"/> class.
            </summary>
            <param name="extensions">The <see cref="T:Mindscape.WpfPropertyGrid.IExtendInPlaceEditors"/> which supplies additional
            editors for specific values or types.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DataTemplate"/> suitable for editing the specified item.
            </summary>
            <param name="item">The data object for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>The <see cref="T:System.Windows.DataTemplate"/> to be used to present and edit the item, if one
            was found; otherwise null.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorSelector.GetEditSettings(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Gets the editing capabilities available to the <see cref="T:Mindscape.WpfPropertyGrid.EditorSelector"/> for the 
            specified node.
            </summary>
            <param name="node">The node for which editing information is being requested.</param>
            <returns>An <see cref="T:Mindscape.WpfPropertyGrid.InPlaceEditing"/> describing the edit capabilities.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.EditorSelector.GetEditor(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Gets an <see cref="T:Mindscape.WpfPropertyGrid.Editor"/> for the specified node.  This is used to determine 
            a <see cref="T:System.Windows.DataTemplate"/> for presentation and editing of the node value.
            </summary>
            <param name="node">The node for which an editor is being requested.</param>
            <returns>An editor capable of providing a data template for the node value.</returns>
            <remarks>If no in-place editor is available, this method returns an "editor" which will 
            render the value using a read-only text block.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.EditorSelector.ExtendingEditors">
            <summary>
            Iterates the list of additional editors.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.InPlaceEditing">
            <summary>
            Describes the in-place editing capability available in a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> for a node.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.InPlaceEditing.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.InPlaceEditing"/> class.
            </summary>
            <param name="canEditInPlace">Indicates whether an in-place editor is available.</param>
            <param name="allowExpand">Indicates whether the grid should show the node as expandable.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.InPlaceEditing.CanEditInPlace">
            <summary>
            Gets whether an in-place editor is available.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.InPlaceEditing.AllowExpand">
            <summary>
            Gets whether the grid should show the node as expandable.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Styles.Alloy">
            <summary>
            A <see cref="T:System.Windows.ResourceDictionary"/> containing resources for the Alloy style.
            </summary>
            <summary>
            Alloy
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Alloy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Styles.Alloy"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Alloy.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Styles.Alloy.StyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the Alloy <see cref="T:System.Windows.Style"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Styles.Blue">
            <summary>
            A <see cref="T:System.Windows.ResourceDictionary"/> containing resources for the Blue style.
            </summary>
            <summary>
            Blue
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Blue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Styles.Blue"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Blue.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Styles.Blue.StyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the Blue <see cref="T:System.Windows.Style"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Styles.Green">
            <summary>
            A <see cref="T:System.Windows.ResourceDictionary"/> containing resources for the Green style.
            </summary>
            <summary>
            Green
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Green.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Styles.Green"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.Green.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Styles.Green.StyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the Green <see cref="T:System.Windows.Style"/>.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Styles.PropertyGridStyles">
            <summary>
            A combined <see cref="T:System.Windows.ResourceDictionary"/> containing all standard
            property grid styles.
            </summary>
            <summary>
            PropertyGridStyles
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.PropertyGridStyles.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.Styles.PropertyGridStyles"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.Styles.PropertyGridStyles.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TreeListView">
            <summary>
            A control with the expand/collapse functionality of a TreeView, but supporting
            multiple columns like a ListView.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.GetIsFillColumn(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsFillColumn attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element from which to read the property value.</param>
            <returns>The value of the IsFillColumn attached property.</returns>
            <remarks>If you set the IsFillColumn attached property on a GridViewColumn,
            this column will resize itself to use up all space not allocated to other columns.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.SetIsFillColumn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsFillColumn attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
            <remarks>If you set the IsFillColumn attached property on a GridViewColumn,
            this column will resize itself to use up all space not allocated to other columns.</remarks>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TreeListView.IsFillColumnProperty">
            <summary>
            Identifies the IsFillColumn attached property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.GetIsResizeColumn(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the IsResizeColumn attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element from which to read the property value.</param>
            <returns>The value of the IsResizeColumn attached property.</returns>
            <remarks>If you set the IsResizeColumn attached property on a GridViewColumn,
            you can resize the column by dragging its right-hand border.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.SetIsResizeColumn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the IsResizeColumn attached property for a given <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="obj">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
            <remarks>If you set the IsResizeColumn attached property on a GridViewColumn,
            you can resize the column by dragging its right-hand border.</remarks>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TreeListView.IsResizeColumnProperty">
            <summary>
            Identifies the IsResizeColumn attached property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.TreeListView.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.TreeListView.Columns"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.TreeListView"/> class.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.OnApplyTemplate">
            <summary>
            Called by the Windows Presentation Foundation infrastructure when
            a template is applied to the control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>true if the item is (or is eligible to be) its own container; otherwise, false.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.TreeListView.Columns">
            <summary>
            Gets or sets the columns in the <see cref="T:Mindscape.WpfPropertyGrid.TreeListView"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.TreeListView.ColumnsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.TreeListView.ExpandCollapseToggleStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the default <see cref="T:System.Windows.Style"/> of an
            expand/collapse toggle button.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TreeListViewItem">
            <summary>
            Implements a selectable item in a <see cref="T:Mindscape.WpfPropertyGrid.TreeListView"/> control.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListViewItem.GetContainerForItemOverride">
            <summary>
            Creates a new <see cref="T:Mindscape.WpfPropertyGrid.TreeListViewItem"/> to display a child item.
            </summary>
            <returns>A new TreeListViewItem.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TreeListViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether an object is a <see cref="T:Mindscape.WpfPropertyGrid.TreeListViewItem"/>.
            </summary>
            <param name="item">The object to evaluate.</param>
            <returns>true if item is a TreeListViewItem; otherwise, false.</returns>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.TreeListViewItem.Level">
            <summary>
            Gets the level of the <see cref="T:Mindscape.WpfPropertyGrid.TreeListViewItem"/> in the hierarchy.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.CollectionUtilities">
            <summary>
            Provides helper methods for working with collections.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionUtilities.Append``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Appends a set of items to a collection.
            </summary>
            <typeparam name="TCollection">The type of item in the collection being appended to.</typeparam>
            <typeparam name="TAppend">The type of item being appended.</typeparam>
            <param name="collection">The collection being appended to.</param>
            <param name="itemsToAdd">The items to be appended.</param>
            <remarks>This method is equivalent to the AddRange method available on various concrete
            collection types.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionUtilities.AddDefaultValueEntry(System.Object)">
            <summary>
            Adds an entry to a collection.  The new entry is a new instance of the collection
            value type (constructed using the default constructor), or null for reference types
            with no default constructor.
            </summary>
            <param name="collectionValue">The collection.</param>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionUtilities.CanAddToCollection(System.Object)">
            <summary>
            Determines whether a collection can be added to using the <see cref="M:Mindscape.WpfPropertyGrid.CollectionUtilities.AddDefaultValueEntry(System.Object)"/>
            method.
            </summary>
            <param name="collectionValue">The collection.</param>
            <returns>true if it is possible to add values to this collection using
            <see cref="M:Mindscape.WpfPropertyGrid.CollectionUtilities.AddDefaultValueEntry(System.Object)"/>; otherwise false.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.CollectionUtilities.CanRemoveFromCollection(System.Object)">
            <summary>
            Determines whether elements can be removed from a collection.
            </summary>
            <param name="collectionValue">The collection.</param>
            <returns>true if it is possible to remove values from this collection;
            otherwise false.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.DateTimeUtilities">
            <summary>
            Provides helper methods for working with <see cref="T:System.DateTime"/> objects.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.DateTimeUtilities.SameMonth(System.DateTime,System.DateTime)">
            <summary>
            Determines whether two dates fall in the same month.
            </summary>
            <param name="date1">The first date.</param>
            <param name="date2">The second date.</param>
            <returns>true if the two dates fall in the same month; otherwise false.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.LevelToIndentConverter">
            <summary>
            Converts the level of a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/> to a horizontal offset.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.LevelToIndentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding source for use by a binding target.
            </summary>
            <param name="value">The level of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>A horizontal offset.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.LevelToIndentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value from a binding target for writing to a binding source.
            </summary>
            <param name="value">The value produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the conversion.</param>
            <returns>This conversion direction is not implemented by this converter.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ExpectedNonNegativeArgument">
            <summary>
              Looks up a localized string similar to [{0}] cannot be negative.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ExpectedNonZeroArgument">
            <summary>
              Looks up a localized string similar to [{0}] cannot be zero.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ExpectedPositiveArgument">
            <summary>
              Looks up a localized string similar to [{0}] must be positive.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ExpiredOn">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid trial license expired on {0:d}.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ExpiringSoon">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid trial license expires on {0:d}.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.InvalidEnumValue">
            <summary>
              Looks up a localized string similar to The value of the argument [{0}] provided for the enumeration [{1}] is invalid.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.InvariantFail">
            <summary>
              Looks up a localized string similar to Invariant Failure.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.ProvidedTypeMustInherit">
            <summary>
              Looks up a localized string similar to The provided type [{0}] must inherit from [{1}].
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The provided string argument [{0}] cannot be empty.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.TrialLicenceMessageCaption">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid Trial License.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.TrialLicenceTraceMessage">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid trial license: {0} days remaining.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.TrialLicenceTraceMessage_Expired">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid trial license expired.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.Properties.Resources.TrialLicenceTraceMessage_GracePeriod">
            <summary>
              Looks up a localized string similar to Mindscape WPF PropertyGrid trial license expiring soon: {0} days remaining.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.PropertyGrid">
            <summary>
            A control for browsing and editing the properties of an object.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/> class.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.CollectionAddCommand">
            <summary>
            A command for adding an item to a collection.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.CollectionRemoveCommand">
            <summary>
            A command for removing an item from a collection.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.AllowModifyCollectionsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.AllowModifyCollections"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.CursorKeyModeProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.CursorKeyMode"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.OnApplyTemplate">
            <summary>
            Called by the framework when a template is applied to the control.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItemProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItem"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItemChangedEvent">
            <summary>
            Identifies the <see cref="E:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItemChanged"/> event.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.IsToolBarVisibleProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.IsToolBarVisible"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.DefaultMarginProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.DefaultMargin"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.BuiltInEditorStylesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.BuiltInEditorStyles"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjectProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObject"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjectsProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjects"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.NodesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Nodes"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.ItemsSource"/> property.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddNode(System.String,System.Object)">
            <summary>
            Adds a top-level node to the grid.  The node data is managed by the grid.
            </summary>
            <param name="caption">The caption or name of the node.</param>
            <param name="value">The initial value of the node.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
            <remarks>The user will be able to edit the node value using the default editor
            for the type of value.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddNode(System.String,System.Object,Mindscape.WpfPropertyGrid.NodeEditor)">
            <summary>
            Adds a top-level node to the grid.  The node data is managed by the grid.
            </summary>
            <param name="caption">The caption or name of the node.</param>
            <param name="value">The initial value of the node.</param>
            <param name="inPlaceEditor">The editor to be used for editing the value.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
            <remarks>The user will be able to edit the node value using the editor specified by
            the inPlaceEditor parameter.  This overrides any type editors specified in <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Editors"/>
            collection.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddNode(System.String,System.Object,System.Windows.DataTemplate)">
            <summary>
            Adds a top-level node to the grid.  The node data is managed by the grid.
            </summary>
            <param name="caption">The caption or name of the node.</param>
            <param name="value">The initial value of the node.</param>
            <param name="inPlaceEditorTemplate">A <see cref="T:System.Windows.DataTemplate"/> specifying the template
            to be used for presenting and editing the node value.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
            <remarks>The node value will be presented to the user using the data template specified.
            To support editing, the data template must accept user input and support two-way
            binding.  The property to which the data template should bind is called Value.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddNode(System.String,System.Object,System.Object)">
            <summary>
            Adds a top-level node to the grid.  The node data is managed by the grid.
            </summary>
            <param name="caption">The caption or name of the node.</param>
            <param name="value">The initial value of the node.</param>
            <param name="inPlaceEditorKey">A resource key for the <see cref="T:System.Windows.DataTemplate"/>
            to be used for presenting and editing the node value.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
            <remarks>The node value will be presented to the user using the data template specified.
            To support editing, the data template must accept user input and support two-way
            binding.  The property to which the data template should bind is called Value.</remarks>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddPropertyNode(System.Object,System.String)">
            <summary>
            Adds a top-level node to the grid.  The node represents a property of an object
            that is not managed by the grid.
            </summary>
            <param name="source">The object whose property is to be added to the grid.</param>
            <param name="propertyName">The name of the property to be added to the grid.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.AddPropertyNode(System.Object,System.String,System.String)">
            <summary>
            Adds a top-level node to the grid.  The node represents a property of an object
            that is not managed by the grid.
            </summary>
            <param name="source">The object whose property is to be added to the grid.</param>
            <param name="propertyName">The name of the property to be added to the grid.</param>
            <param name="caption">The display name for the property.</param>
            <returns>The <see cref="T:Mindscape.WpfPropertyGrid.Node"/> object added to the grid.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.PropertyGrid.RemoveNode(Mindscape.WpfPropertyGrid.Node)">
            <summary>
            Removes a top-level node from the grid.
            </summary>
            <param name="node">The node to remove from the grid.</param>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.BindingViewProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.BindingView"/> dependency property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.GroupingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Grouping"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SortingProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Sorting"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.SortSubpropertiesProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SortSubproperties"/> property.
            </summary>
        </member>
        <member name="F:Mindscape.WpfPropertyGrid.PropertyGrid.PropertyNameTemplateProperty">
            <summary>
            Identifies the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.PropertyNameTemplate"/> property.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.AllowModifyCollections">
            <summary>
            Gets or sets whether the grid should display a user interface to allow the user to
            add or remove items from collections.
            This is a dependency property.
            </summary>
            <remarks>
            <para>Setting this property to false does <strong>not</strong> prevent users from
            editing the values in collections: it only prevents adding and removing items.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.AllowModifyCollectionsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.CursorKeyMode">
            <summary>
            Gets or sets how the grid handles cursor keys when typed into editors.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.CursorKeyModeProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItem">
            <summary>
            Gets or sets the selected grid item.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItemProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="E:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedGridItemChanged">
            <summary>
            Occurs when the user selects a new item in the property grid.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.IsToolBarVisible">
            <summary>
            Gets or sets whether the built-in toolbar should be displayed above the grid.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.IsToolBarVisibleProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.DefaultMargin">
            <summary>
            Gets or sets the default margin placed around editors.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.DefaultMarginProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.EditorSelector">
            <summary>
            Gets the template selector used to create value editors.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.Editors">
            <summary>
            Gets the collection of custom editors for this PropertyGrid instance.
            </summary>
            <remarks>Add editors to this collection to define how to edit custom types or
            to customise the display of specific properties.</remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.BuiltInEditorStyles">
            <summary>
            Gets or sets the styles applied to built-in editors.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.BuiltInEditorStylesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObject">
            <summary>
            Gets or sets the object for which the grid displays properties.  This is a dependency
            property.
            </summary>
            <remarks>
            <para>Setting this property clears any existing <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjects"/> array.
            After setting this property, <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjects"/> returns a one-element array
            containing the selected object.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjectProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjects">
            <summary>
            Gets or sets the objects for which the grid displays properties.
            This is a dependency property.
            </summary>
            <remarks>
            <para>Setting this property clears any existing <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObject"/>.
            After setting this property, <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObject"/> returns a <see cref="T:Mindscape.WpfPropertyGrid.MultipleObjectWrapper"/>.</para>
            <para>Modifications to the SelectedObjects list after it is assigned will be reflected
            in the grid only if the list implements INotifyCollectionChanged.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.SelectedObjectsProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.Nodes">
            <summary>
            Gets or sets the set of top-level nodes in the grid.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.NodesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ItemsSource">
            <summary>
            Gets or sets a collection used to generate the content of the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.
            This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.ItemsSourceProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.BindingView">
            <summary>
            Gets or sets the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridBindingView"/> representing the view state
            of the grid.  This is a dependency property.
            </summary>
            <remarks>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.BindingViewProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.Grouping">
            <summary>
            Gets or sets property grouping settings.
            This is a dependency property.
            </summary>
            <remarks>
            <para>This property supports only single-level grouping, as this is all that is usually required
            for the <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrid"/>.  If multi-level grouping is required, bypass this property and
            use the BindingView.DefaultView.GroupDescriptions collection instead.</para>
            <para>If both the BindingView.DefaultView.GroupDescriptions collection and the PropertyGrid.Grouping property
            are set, the last one to be set takes precedence.  If BindingView.DefaultView.GroupDescriptions is
            modified after PropertyGrid.Grouping has been set, PropertyGrid.Grouping continues to reflect its previous
            value (even though this value is ignored in favour of the collection).</para>
            <para>The <see cref="T:Mindscape.WpfPropertyGrid.PropertyGrouping"/> class provides implementations of common grouping strategies.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.GroupingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.Sorting">
            <summary>
            Gets or sets property sorting order.
            This is a dependency property.
            </summary>
            <remarks>
            <para>If both the BindingView.DefaultView.CustomSort property and the PropertyGrid.Sorting property
            are set, the last one to be set takes precedence.  If BindingView.DefaultView.CustomSort is
            modified after PropertyGrid.Sorting has been set, PropertyGrid.Sorting continues to reflect its previous
            value (even though this value is ignored).  Additionally, setting PropertyGrid.Sorting clears any
            previously set BindingView.DefaultView.SortDescriptions value.</para>
            <para>Changing this setting while the grid is displayed collapses any expanded properties.</para>
            <para>The <see cref="T:Mindscape.WpfPropertyGrid.PropertySorting"/> class provides implementations of common sorting strategies.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.SortingProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SortSubproperties">
            <summary>
            Gets or sets whether the <see cref="P:Mindscape.WpfPropertyGrid.PropertyGrid.Sorting"/> setting should be applied to subproperties.
            This is a dependency property.
            </summary>
            <remarks>
            <para>The default value is true.</para>
            <para>Changing this setting while the grid is displayed collapses any expanded properties.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.SortSubpropertiesProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.PropertyNameTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> used to display property names.
            This is a dependency property.
            </summary>
            <remarks>
            <para>The template is responsible for including suitable expand/collapse UI if
            required; this is necessary to support full replacement of the expand/collapse UI.
            The data template receives a <see cref="T:Mindscape.WpfPropertyGrid.PropertyGridRow"/>.</para>
            <strong>Dependency Property Information</strong>
            <table>
              <tr><td>Identifier field</td><td><see cref="F:Mindscape.WpfPropertyGrid.PropertyGrid.PropertyNameTemplateProperty"/></td></tr>
              <tr><td>Metadata properties set to true</td><td>None</td></tr>
            </table>
            </remarks>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.PropertyNameTemplateKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            presents property names.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SelectionTrackingStyleKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.Style"/> that
            tracks the current selection in templates based on a <see cref="T:Mindscape.WpfPropertyGrid.TreeListView"/>.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ReadOnlyDisplayKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            presents non-editable values.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.CollectionDisplayKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            presents collections.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.CollectionElementEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            presents collection elements.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SimpleTextEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits values as plain text.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ListSelectEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits values by selecting them from a drop-down list or typing a value.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ListSelectNoTextEntryEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits values by selecting them from a drop-down list and does not permit typing
            of arbitrary values.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.RadioSelectEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits values by selecting them from a group of radio buttons.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.CheckBoxEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits boolean values using a check box.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.SliderEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits numeric values using a slider.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.NumericUpDownEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits numeric values using a text box and a pair of up-down buttons.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.MaskedTextEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits values using a masked text box.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.DateEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits dates using a calendar display.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ColorEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits colors using a color picker.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.PropertyGrid.ManyEditorKey">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceKey"/> for the <see cref="T:System.Windows.DataTemplate"/> that
            edits inconsistent values.
            </summary>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.NamedColor">
            <summary>
            Associates a name with a color according to the WPF color naming standard.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.NamedColor.#ctor(System.String,System.Windows.Media.Color)">
            <summary>
            Initialises a new instance of the <see cref="T:Mindscape.WpfPropertyGrid.NamedColor"/> class.
            </summary>
            <param name="name">The name of the color.</param>
            <param name="color">The color value.</param>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NamedColor.Name">
            <summary>
            Gets the name of the color.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NamedColor.Color">
            <summary>
            Gets the color value.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NamedColor.NamedColors">
            <summary>
            Gets a list of all named colors, as defined in the WPF <see cref="T:System.Windows.Media.Colors"/> class.
            </summary>
        </member>
        <member name="P:Mindscape.WpfPropertyGrid.NamedColor.ColorNames">
            <summary>
            Gets a mapping of colors to names, as defined in the WPF <see cref="T:System.Windows.Media.Colors"/> class.
            </summary>
            <remarks>In rare cases a color value may have multiple names (e.g. Cyan and Aqua).  In such cases, 
            the ColorNames dictionary will contain only one of these names; which name is chosen is not defined.</remarks>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.ReflectionUtilities">
            <summary>
            Provides helper methods for working with reflection.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.ReflectionUtilities.IsBrowsable(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determines whether a member is browsable (i.e. does not have a <see cref="T:System.ComponentModel.BrowsableAttribute"/>
            with the Browsable property set to false).
            </summary>
            <param name="member">The member to check.</param>
            <returns>true if the member is browsable (does not have the BrowsableAttribute, or has
            BrowsableAttribute.Yes); false if the member is not browsable.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.StringUtilities">
            <summary>
            Provides helper methods for working with strings.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.StringUtilities.FormatCurrentCulture(System.String,System.Object[])">
            <summary>
            Formats a string using the current thread culture.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <returns>A string containing the formatted objects.</returns>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.StringUtilities.Humanize(System.String)">
            <summary>
            Creates a human-friendly string suitable for use as a display name.
            </summary>
            <param name="name">The programmatic name for which a display name is required.</param>
            <returns>The human-friendly name.</returns>
        </member>
        <member name="T:Mindscape.WpfPropertyGrid.TypeUtilities">
            <summary>
            Provides helper methods for working with types.
            </summary>
        </member>
        <member name="M:Mindscape.WpfPropertyGrid.TypeUtilities.IsGenericCollection(System.Type)">
            <summary>
            Determines whether a type is a generic collection type.
            </summary>
            <param name="propertyType">The type to test.</param>
            <returns>true if the type is a (closed constructed) generic collection type; 
            otherwise false.</returns>
        </member>
    </members>
</doc>
