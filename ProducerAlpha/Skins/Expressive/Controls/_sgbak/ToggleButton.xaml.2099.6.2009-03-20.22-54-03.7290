<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
    mc:Ignorable="d" 
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"                    
>

    <!-- ====================================================================================================================================== -->

    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="TextBlock.Foreground" Value="White"/>
        <Setter Property="TextBlock.FontSize" Value="11"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>

                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" />
                        <Border x:Name="Hover" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                        </Border>
                        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                    <GradientStop Color="#26FFFFFF" Offset="0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                    <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Hover" Value="Red"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="Pressed" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource SelectedBackgroundBrush}" />
                            <Setter Property="Opacity" TargetName="Border" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource WhiteColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ================================================================================================================== -->

    <Style x:Key="ScriptPaneToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource WhiteColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextBlock.Foreground" Value="White"/>
        <Setter Property="TextBlock.FontSize" Value="11"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>

                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Background="{DynamicResource NormalBrush}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" />
                        <Border x:Name="Hover" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource BlackColor}"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{DynamicResource NormalBorderBrush}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                        </Border>
                        <Rectangle Opacity="1" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                            <Rectangle.Fill>
                                <LinearGradientBrush EndPoint="0.5,0.971" StartPoint="0.5,0.042">
                                    <GradientStop Color="#26FFFFFF" Offset="0" />
                                    <GradientStop Color="#00FFFFFF" Offset="1" />
                                    <GradientStop Color="#26FFFFFF" Offset="0.467" />
                                    <GradientStop Color="#00FFFFFF" Offset="0.475" />
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>

                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" RecognizesAccessKey="True" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />

                    </Grid>


                    <ControlTemplate.Triggers>
                        
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="Hover" Value="0.5"/>
                        </Trigger>
                        
                        
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" TargetName="Pressed" Value="0.2"/>
                        </Trigger>
                        
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="IsChecked" Value="true">

                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource SelectedBackgroundBrush}" />

                            <Setter Property="Opacity" TargetName="Hover" Value="0.2"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource BlackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ===================================================================================================================-->

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ToolBarToggleButtonHorizontalBackground}"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border SnapsToDevicePixels="true" x:Name="Bd" CornerRadius="0,0,0,0" Background="{DynamicResource LightBrush}">
                        <Canvas SnapsToDevicePixels="true" HorizontalAlignment="Right" Margin="7,2,2,2" VerticalAlignment="Bottom" Width="6" Height="7">
                            <Path Stroke="White" Data="M 1 1.5 L 6 1.5"/>
                            <Path Stroke="{TemplateBinding Foreground}" Data="M 0 0.5 L 5 0.5"/>
                            <Path Fill="White" Data="M 0.5 4 L 6.5 4 L 3.5 7 Z"/>
                            <Path Fill="{TemplateBinding Foreground}" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z"/>
                        </Canvas>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource MouseOverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ToolBarButtonHover}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource ToolBarGripper}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================================================================================================-->

    <Style x:Key="PreviewToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>

                        <Border x:Name="Border" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="Hover" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Rectangle Opacity="0" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                        </Rectangle>

                        <Image x:Name="imgPreview" Source="{DynamicResource imgPreviewIconOff}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />
                        
                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgPreviewIconOn}"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgPreviewIconOff}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================================================================================================-->

    <Style x:Key="LockToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>

                        <Border x:Name="Border" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="Hover" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Rectangle Opacity="0" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                        </Rectangle>

                        <Image x:Name="imgPreview" Source="{DynamicResource imgLockIconOff}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgLockIconOn}"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgLockIconOff}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ===================================================================================================================-->

    <Style x:Key="RecordingToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Cursor="Hand">

                        <Border x:Name="Border" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="Hover" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Rectangle Opacity="0" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                        </Rectangle>

                        <Image x:Name="imgPreview" Source="{DynamicResource imgRecordingIconOff}" ToolTip="{DynamicResource ToolTipRecordingModeIsOff}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgRecordingIconOn}"/>
                            <Setter Property="ToolTip" TargetName="imgPreview" Value="{DynamicResource ToolTipRecordingModeIsOn}"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter Property="Source" TargetName="imgPreview" Value="{DynamicResource imgRecordingIconOff}"/>
                            <Setter Property="ToolTip" TargetName="imgPreview" Value="{DynamicResource ToolTipRecordingModeIsOff}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ===================================================================================================================-->

    <Style x:Key="MuteToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Cursor="Hand">

                        <Border x:Name="Border" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="Hover" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="0" Padding="{TemplateBinding Padding}" CornerRadius="3,3,3,3" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Rectangle Opacity="0" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                        </Rectangle>

                        <Image x:Name="imgMute" Source="{DynamicResource imgMuteIconOff}" ToolTip="{DynamicResource ToolTipMasterVolume}" RenderTransformOrigin=".5,.5" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="4,4,4,4">
                        </Image>

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Source" TargetName="imgMute" Value="{DynamicResource imgMuteIconOn}"/>
                            <Setter Property="ToolTip" TargetName="imgMute" Value="{DynamicResource ToolTipMuteVideoIsOn}"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter Property="Source" TargetName="imgMute" Value="{DynamicResource imgMuteIconOff}"/>
                            <Setter Property="ToolTip" TargetName="imgMute" Value="{DynamicResource ToolTipMueVideoIsOff}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <!-- ===================================================================================================================-->

    <Style x:Key="BottomBarAutoHideToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="Transparent"/>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Transparent" />
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Cursor="Hand">

                        <Border x:Name="Border" BorderThickness="0" Padding="{TemplateBinding Padding}">
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Border x:Name="Hover" BorderThickness="0" Padding="{TemplateBinding Padding}" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.Background>
                        </Border>
                        <Border x:Name="Pressed" BorderThickness="0" Padding="{TemplateBinding Padding}" Opacity="0" >
                            <Border.Background>
                                <SolidColorBrush Color="{DynamicResource WhiteColor}"/>
                            </Border.Background>
                            <Border.BorderBrush>
                                <SolidColorBrush Color="Transparent"/>
                            </Border.BorderBrush>
                        </Border>
                        <Rectangle Opacity="0" Stroke="{x:Null}" RadiusX="3" RadiusY="3" Margin="2,2,2,2" VerticalAlignment="Stretch" Height="Auto" x:Name="Shine">
                        </Rectangle>

                        <!-- Visual States -->
                        <!-- Off/Out -->
                        <Canvas x:Name="OffOut" Width="10" Height="10" Canvas.Left="0" Canvas.Top="0" Visibility="Visible">
                            <Rectangle Width="10" Height="10" Fill="#00000000" Stroke="#FF000000" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                            <Path Width="9.291" Height="5.117" Stretch="Fill" Stroke="#FF000000" StrokeThickness="0" Data="M-7.9367658,7.3298626 L-7.9224732,7.324764 -5.9400573,7.3290756 -3.9557051,7.3130793 -6.7624885,4.118837 -9.7833117,7.3133081" Fill="#FFFFFFFF" Canvas.Top="1.688" Canvas.Left="0.377"/>
                        </Canvas>

                        <!-- Off/Over -->
                        <Canvas x:Name="OffOver" Width="10" Height="10" Canvas.Left="0" Canvas.Top="0" Visibility="Collapsed">
                            <Rectangle Width="10" Height="10" Fill="#00000000" Stroke="#FF000000" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                            <Path Width="9.291" Height="5.117" Stretch="Fill" Stroke="#FF000000" StrokeThickness="0" Data="M-7.9367658,7.3298626 L-7.9224732,7.324764 -5.9400573,7.3290756 -3.9557051,7.3130793 -6.7624885,4.118837 -9.7833117,7.3133081" Fill="#FFFFFFFF" Canvas.Top="1.688" Canvas.Left="0.377"/>
                        </Canvas>
                        
                        <!-- On/Out -->
                        <Canvas x:Name="OnOut" Width="10" Height="10" RenderTransformOrigin="0.5,0.5" Canvas.Left="0" Canvas.Top="0" Visibility="Collapsed">
                            <Canvas.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Canvas.RenderTransform>
                            <Rectangle Width="10" Height="10" Fill="#00000000" Stroke="#FF000000" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                            <Path Width="9.291" Height="5.117" Stretch="Fill" Stroke="#FF000000" StrokeThickness="0" Data="M-7.9367658,7.3298626 L-7.9224732,7.324764 -5.9400573,7.3290756 -3.9557051,7.3130793 -6.7624885,4.118837 -9.7833117,7.3133081" Fill="#FFFFFFFF" Canvas.Top="1.688" Canvas.Left="0.377"/>
                        </Canvas>
                        
                        <!-- On/Over -->
                        <Canvas x:Name="OnOver" Width="10" Height="10" RenderTransformOrigin="0.5,0.5" Canvas.Left="0" Canvas.Top="0" Visibility="Collapsed">
                            <Canvas.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                    <SkewTransform AngleX="0" AngleY="0"/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform X="0" Y="0"/>
                                </TransformGroup>
                            </Canvas.RenderTransform>
                            <Rectangle Width="10" Height="10" Fill="#00000000" Stroke="#FF000000" StrokeThickness="0" RadiusX="0" RadiusY="0"/>
                            <Path Width="9.291" Height="5.117" Stretch="Fill" Stroke="#FF000000" StrokeThickness="0" Data="M-7.9367658,7.3298626 L-7.9224732,7.324764 -5.9400573,7.3290756 -3.9557051,7.3130793 -6.7624885,4.118837 -9.7833117,7.3133081" Fill="#FFFFFFFF" Canvas.Top="1.688" Canvas.Left="0.377"/>
                        </Canvas>

                    </Grid>
                    <ControlTemplate.Triggers>

                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Visibility" TargetName="OnOut"    Value="Visible"  />
                            <Setter Property="Visibility" TargetName="OnOver"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOut"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOver"  Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="ToggleButton.IsChecked" Value="False">
                            <Setter Property="Visibility" TargetName="OnOut"    Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OnOver"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOut"   Value="Visible"  />
                            <Setter Property="Visibility" TargetName="OffOver"  Value="Collapsed"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsMouseOver" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="OnOut"    Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OnOver"   Value="Visible"  />
                            <Setter Property="Visibility" TargetName="OffOut"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOver"  Value="Collapsed"/>
                        </MultiTrigger>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsMouseOver" Value="True" />
                                <Condition Property="ToggleButton.IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="OnOut"    Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OnOver"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOut"   Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="OffOver"  Value="Visible"  />
                        </MultiTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>